{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { cond, lessThan, multiply, pow, cos, sqrt, sub, add, divide } from \"./base\";\nimport AnimatedBezier from \"./core/AnimatedBezier\";\nvar Easing = function () {\n  function Easing() {\n    _classCallCheck(this, Easing);\n  }\n  _createClass(Easing, null, [{\n    key: \"linear\",\n    value:\n    function linear(t) {\n      return t;\n    }\n  }, {\n    key: \"ease\",\n    value:\n\n    function ease(t) {\n      return new AnimatedBezier(t, 0.42, 0, 1, 1);\n    }\n  }, {\n    key: \"quad\",\n    value:\n\n    function quad(t) {\n      return multiply(t, t);\n    }\n  }, {\n    key: \"cubic\",\n    value:\n\n    function cubic(t) {\n      return multiply(t, t, t);\n    }\n  }, {\n    key: \"poly\",\n    value:\n\n    function poly(n) {\n      return function (t) {\n        return pow(t, n);\n      };\n    }\n  }, {\n    key: \"sin\",\n    value:\n\n    function sin(t) {\n      return sub(1, cos(multiply(t, Math.PI, 0.5)));\n    }\n  }, {\n    key: \"circle\",\n    value:\n\n    function circle(t) {\n      return sub(1, sqrt(sub(1, multiply(t, t))));\n    }\n  }, {\n    key: \"exp\",\n    value:\n\n    function exp(t) {\n      return pow(2, multiply(10, sub(t, 1)));\n    }\n  }, {\n    key: \"elastic\",\n    value:\n\n    function elastic() {\n      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var p = bounciness * Math.PI;\n      return function (t) {\n        return sub(1, multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p))));\n      };\n    }\n  }, {\n    key: \"back\",\n    value:\n\n    function back(s) {\n      if (s === undefined) {\n        s = 1.70158;\n      }\n      return function (t) {\n        return multiply(t, t, sub(multiply(add(s, 1), t), s));\n      };\n    }\n  }, {\n    key: \"bounce\",\n    value:\n\n    function bounce(t) {\n      var sq = function sq(v) {\n        return multiply(7.5625, v, v);\n      };\n      return cond(lessThan(t, 1 / 2.75), sq(t), cond(lessThan(t, 2 / 2.75), add(0.75, sq(sub(t, 1.5 / 2.75))), cond(lessThan(t, 2.5 / 2.76), add(0.9375, sq(sub(t, 2.25 / 2.75))), add(0.984375, sq(sub(t, 2.625 / 2.75))))));\n    }\n  }, {\n    key: \"bezier\",\n    value:\n\n    function bezier(x1, y1, x2, y2) {\n      return function (t) {\n        return new AnimatedBezier(t, x1, y1, x2, y2);\n      };\n    }\n  }, {\n    key: \"in\",\n    value:\n\n    function _in(easing) {\n      return easing;\n    }\n  }, {\n    key: \"out\",\n    value:\n\n    function out(easing) {\n      return function (t) {\n        return sub(1, easing(sub(1, t)));\n      };\n    }\n  }, {\n    key: \"inOut\",\n    value:\n\n    function inOut(easing) {\n      return function (t) {\n        return cond(lessThan(t, 0.5), divide(easing(multiply(t, 2)), 2), sub(1, divide(easing(multiply(sub(1, t), 2)), 2)));\n      };\n    }\n  }]);\n  return Easing;\n}();\nexport { Easing as default };","map":{"version":3,"sources":["Easing.js"],"names":["cond","lessThan","multiply","pow","cos","sqrt","sub","add","divide","AnimatedBezier","Easing","t","n","Math","PI","bounciness","p","s","undefined","sq","v","x1","y1","x2","y2","easing"],"mappings":"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","sourcesContent":["import {\n  cond,\n  lessThan,\n  multiply,\n  pow,\n  cos,\n  sqrt,\n  sub,\n  add,\n  divide,\n} from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return t => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness = 1) {\n    const p = bounciness * Math.PI;\n    return t =>\n      sub(\n        1,\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\n      );\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return t => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = v => multiply(7.5625, v, v);\n    return cond(\n      lessThan(t, 1 / 2.75),\n      sq(t),\n      cond(\n        lessThan(t, 2 / 2.75),\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\n        cond(\n          lessThan(t, 2.5 / 2.76),\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\n        )\n      )\n    );\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return t => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return t => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return t =>\n      cond(\n        lessThan(t, 0.5),\n        divide(easing(multiply(t, 2)), 2),\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}