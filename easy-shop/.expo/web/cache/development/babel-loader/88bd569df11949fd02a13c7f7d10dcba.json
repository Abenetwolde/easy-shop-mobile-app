{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport deepEqual from 'fbjs/lib/areEqual';\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  inputTransform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value: value\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\nexport function createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\nvar AnimatedTransform = function (_AnimatedNode) {\n  _inherits(AnimatedTransform, _AnimatedNode);\n  var _super = _createSuper(AnimatedTransform);\n  function AnimatedTransform(transform, config) {\n    var _this;\n    _classCallCheck(this, AnimatedTransform);\n    _this = _super.call(this, {\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform));\n    _this._config = config;\n    _this._transform = transform;\n    return _this;\n  }\n  _createClass(AnimatedTransform, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedTransform, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._transform.map(function (transform) {\n        var result = {};\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          }\n        }\n        return result;\n      });\n    }\n  }]);\n  return AnimatedTransform;\n}(AnimatedNode);","map":{"version":3,"sources":["AnimatedTransform.js"],"names":["AnimatedNode","deepEqual","sanitizeTransform","inputTransform","outputTransform","forEach","transform","key","value","push","property","nodeID","__nodeID","extractAnimatedParentNodes","parents","createOrReuseTransformNode","oldNode","config","_config","AnimatedTransform","constructor","type","_transform","toString","__onEvaluate","map","result","__getValue"],"mappings":";;;;;;;AAAA,OAAOA,YAAP;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,SAASC,iBAAT,CAA2BC,cAA3B,EAA2C;EACzC,IAAMC,eAAe,GAAG,EAAxB;EACAD,cAAc,CAACE,OAAfF,CAAuBG,UAAAA,SAAS,EAAI;IAClC,KAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;MAC3B,IAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;MACA,IAAIC,KAAK,YAAYR,YAArB,EAAmC;QACjCI,eAAe,CAACK,IAAhBL,CAAqB;UACnBM,QAAQ,EAAEH,GADS;UAEnBI,MAAM,EAAEH,KAAK,CAACI;QAFK,CAArBR,CAAAA;MAID,CALD,MAKO;QACLA,eAAe,CAACK,IAAhBL,CAAqB;UACnBM,QAAQ,EAAEH,GADS;UAEnBC,KAAAA,EAAAA;QAFmB,CAArBJ,CAAAA;MAID;IACF;EACF,CAfDD,CAAAA;EAgBA,OAAOC,eAAP;AACD;AAED,SAASS,0BAAT,CAAoCP,SAApC,EAA+C;EAC7C,IAAMQ,OAAO,GAAG,EAAhB;EACAR,SAAS,CAACD,OAAVC,CAAkBA,UAAAA,SAAS,EAAI;IAC7B,KAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;MAC3B,IAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;MACA,IAAIC,KAAK,YAAYR,YAArB,EAAmC;QACjCc,OAAO,CAACL,IAARK,CAAaN,KAAbM,CAAAA;MACD;IACF;EACF,CAPDR,CAAAA;EAQA,OAAOQ,OAAP;AACD;AAED,OAAO,SAASC,0BAAT,CAAoCT,SAApC,EAA+CU,OAA/C,EAAwD;EAC7D,IAAMC,MAAM,GAAGf,iBAAiB,CAACI,SAAD,CAAhC;EACA,IAAIU,OAAO,IAAIf,SAAS,CAACgB,MAAD,EAASD,OAAO,CAACE,OAAjB,CAAxB,EAAmD;IACjD,OAAOF,OAAP;EACD;EACD,OAAO,IAAIG,iBAAJ,CAAsBb,SAAtB,EAAiCW,MAAjC,CAAP;AACD;AAAA,IAEKE,iBAAN;EAAA;EAAA;EACEC,2BAAYd,SAAD,EAAYW,MAAZ,EAAoB;IAAA;IAAA;IAC7B,0BACE;MAAEI,IAAI,EAAE,WAAR;MAAqBf,SAAS,EAAEW;IAAhC,CADF,EAEEJ,0BAA0B,CAACP,SAAD,CAF5B;IAIA,MAAKY,OAAL,GAAeD,MAAf;IACA,MAAKK,UAAL,GAAkBhB,SAAlB;IAAA;EACD;EAAA;IAAA;IAAA,OAEDiB,oBAAW;MACT,OAAA,yBAAA,CAAA,MAAA,CAAiC,IAAA,CAAKX,QAAtC,CAAA;IACD;EAAA;IAAA;IAAA,OAEDY,wBAAe;MACb,OAAO,IAAA,CAAKF,UAAL,CAAgBG,GAAhB,CAAoBnB,UAAAA,SAAS,EAAI;QACtC,IAAMoB,MAAM,GAAG,CAAA,CAAf;QACA,KAAK,IAAMnB,GAAX,IAAkBD,SAAlB,EAA6B;UAC3B,IAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;UACA,IAAIC,KAAK,YAAYR,YAArB,EAAmC;YACjC0B,MAAM,CAACnB,GAAD,CAANmB,GAAclB,KAAK,CAACmB,UAANnB,EAAdkB;UACD;QACF;QACD,OAAOA,MAAP;MACD,CATM,CAAP;IAUD;EAAA;EAAA;AAAA,EAzB6B1B,YAAhC","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return `AnimatedTransform, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}