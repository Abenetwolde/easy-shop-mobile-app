{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\nvar AnimatedBlock = function (_AnimatedNode) {\n  _inherits(AnimatedBlock, _AnimatedNode);\n  var _super = _createSuper(AnimatedBlock);\n  function AnimatedBlock(array) {\n    var _this;\n    _classCallCheck(this, AnimatedBlock);\n    invariant(array.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    _this = _super.call(this, {\n      type: 'block',\n      block: array\n    }, array);\n    _defineProperty(_assertThisInitialized(_this), \"_array\", void 0);\n    _this._array = array;\n    return _this;\n  }\n  _createClass(AnimatedBlock, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBlock, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var result;\n      this._array.forEach(function (node) {\n        result = val(node);\n      });\n      return result;\n    }\n  }]);\n  return AnimatedBlock;\n}(AnimatedNode);\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\nfunction nodify(v) {\n  if (typeof v === 'object' && (v === null || v === void 0 ? void 0 : v.__isProxy)) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n\n  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);\n}\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(function (node) {\n    return adapt(node);\n  })) : nodify(v);\n}","map":{"version":3,"sources":["AnimatedBlock.js"],"names":["invariant","val","AnimatedNode","InternalAnimatedValue","AnimatedBlock","constructor","array","every","el","type","block","_array","toString","__nodeID","__onEvaluate","result","forEach","node","createAnimatedBlock","items","adapt","nodify","v","__isProxy","__val","valueForConstant","Array","isArray","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AACA,OAAOC,YAAP;AACA,OAAOC,qBAAP;AAAA,IAEMC,aAAN;EAAA;EAAA;EAGEC,uBAAYC,KAAD,EAAQ;IAAA;IAAA;IACjBN,SAAS,CACPM,KAAK,CAACC,KAAND,CAAYE,UAAAA,EAAE;MAAA,OAAIA,EAAE,YAAYN,YAAhCI;IAAAA,EADO,EAAA,2IAAA,CAATN;IAIA,0BAAM;MAAES,IAAI,EAAE,OAAR;MAAiBC,KAAK,EAAEJ;IAAxB,CAAN,EAAuCA,KAAvC;IALiB,eAAA,gCAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IAMjB,MAAKK,MAAL,GAAcL,KAAd;IAAA;EACD;EAAA;IAAA;IAAA,OAEDM,oBAAW;MACT,OAAA,qBAAA,CAAA,MAAA,CAA6B,IAAA,CAAKC,QAAlC,CAAA;IACD;EAAA;IAAA;IAAA,OAEDC,wBAAe;MACb,IAAIC,MAAJ;MACA,IAAA,CAAKJ,MAAL,CAAYK,OAAZ,CAAoBC,UAAAA,IAAI,EAAI;QAC1BF,MAAM,GAAGd,GAAG,CAACgB,IAAD,CAAZF;MACD,CAFD,CAAA;MAGA,OAAOA,MAAP;IACD;EAAA;EAAA;AAAA,EAtByBb,YAA5B;AAyBA,OAAO,SAASgB,mBAAT,CAA6BC,KAA7B,EAAoC;EACzC,OAAOC,KAAK,CAACD,KAAD,CAAZ;AACD;AAED,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;EACjB,IAAI,OAAOA,CAAP,KAAa,QAAb,KAAyBA,CAAzB,KAAA,IAAA,IAAyBA,CAAzB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAyBA,CAAC,CAAEC,SAA5B,CAAJ,EAA2C;IACzC,IAAI,CAACD,CAAC,CAACE,KAAP,EAAc;MACZF,CAAC,CAACE,KAAFF,GAAU,IAAInB,qBAAJ,CAA0B,CAA1B,CAAVmB;IACD;IACD,OAAOA,CAAC,CAACE,KAAT;EALe;;EAQjB,OAAOF,CAAC,YAAYpB,YAAboB,GACHA,CADGA,GAEHnB,qBAAqB,CAACsB,gBAAtBtB,CAAuCmB,CAAvCnB,CAFJ;AAGD;AAED,OAAO,SAASiB,KAAT,CAAeE,CAAf,EAAkB;EACvB,OAAOI,KAAK,CAACC,OAAND,CAAcJ,CAAdI,CAAAA,GACH,IAAItB,aAAJ,CAAkBkB,CAAC,CAACM,GAAFN,CAAML,UAAAA,IAAI;IAAA,OAAIG,KAAK,CAACH,IAAD,CAAnBK;EAAAA,EAAlB,CADGI,GAEHL,MAAM,CAACC,CAAD,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"module"}