{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"pager\", \"lazyPlaceholder\", \"tabBar\", \"tabBarOptions\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport { NavigationHelpersContext, TabActions, useTheme } from '@react-navigation/native';\nimport MaterialTopTabBar from \"./MaterialTopTabBar\";\nexport default function MaterialTopTabView(_ref) {\n  var pager = _ref.pager,\n    lazyPlaceholder = _ref.lazyPlaceholder,\n    _ref$tabBar = _ref.tabBar,\n    tabBar = _ref$tabBar === void 0 ? function (props) {\n      return React.createElement(MaterialTopTabBar, props);\n    } : _ref$tabBar,\n    tabBarOptions = _ref.tabBarOptions,\n    state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    sceneContainerStyle = _ref.sceneContainerStyle,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar(_objectSpread(_objectSpread(_objectSpread({}, tabBarOptions), props), {}, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, TabActions.jumpTo(state.routes[index].name)), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderPager: pager,\n    renderLazyPlaceholder: lazyPlaceholder,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  })));\n}","map":{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["React","TabView","NavigationHelpersContext","TabActions","useTheme","MaterialTopTabBar","MaterialTopTabView","pager","lazyPlaceholder","tabBar","props","tabBarOptions","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","index","dispatch","jumpTo","routes","name","target","key","route","render","emit","type","backgroundColor","background"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAA4C,uBAA5C;AACA,SACEC,wBADF,EAGEC,UAHF,EAKEC,QALF,QAMO,0BANP;AAQA,OAAOC,iBAAP;AAeA,eAAe,SAASC,kBAAT,OAUL;EAAA,IATRC,KADyC,QACzCA,KADyC;IAEzCC,eAFyC,QAEzCA,eAFyC;IAAA,mBAGzCC,MAAM;IAANA,MAAM,4BAAIC,UAAAA,KAAD;MAAA,OAAmC,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAuBA,KAAvB,CAHH;IAAA;IAIzCC,aAJyC,QAIzCA,aAJyC;IAKzCC,KALyC,QAKzCA,KALyC;IAMzCC,UANyC,QAMzCA,UANyC;IAOzCC,WAPyC,QAOzCA,WAPyC;IAQzCC,mBARyC,QAQzCA,mBARyC;IAStCC,IAAAA;EAEH,gBAAmBZ,QAAQ,EAA3B;IAAQa,MAAAA,aAAAA,MAAAA;EAER,IAAMC,YAAY,GAAIR,SAAhBQ,YAAY,CAAIR,KAAD,EAA+B;IAClD,OAAOD,MAAM,+CACRE,aADS,GAETD,KAFS;MAGZE,KAAK,EAAEA,KAHK;MAIZC,UAAU,EAAEA,UAJA;MAKZC,WAAW,EAAEA;IAAAA,GALf;EAOD,CARD;EAUA,OACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAA0B,QAA1B,EAAA;IAAmC,KAAK,EAAED;EAA1C,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMG,IADN,EAAA;IAEE,aAAa,EAAGG,uBAAAA,KAAD;MAAA,OACb,UAAU,CAACC,QAAX,iCACKjB,UAAU,CAACkB,MAAXlB,CAAkBS,KAAK,CAACU,MAANV,CAAaO,KAAbP,CAAAA,CAAoBW,IAAtCpB,CADe;QAElBqB,MAAM,EAAEZ,KAAK,CAACa;MAAAA,GALpB;IAAA;IAQE,WAAW,EAAE;MAAA,IAAGC,KAAAA,SAAAA,KAAAA;MAAAA,OAAYZ,WAAW,CAACY,KAAK,CAACD,GAAP,CAAXX,CAAuBa,MAAvBb,EAR9B;IAAA;IASE,eAAe,EAAEF,KATnB;IAUE,YAAY,EAAEM,YAVhB;IAWE,WAAW,EAAEX,KAXf;IAYE,qBAAqB,EAAEC,eAZzB;IAaE,YAAY,EAAE;MAAA,OAAM,UAAU,CAACoB,IAAX,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB,CAbtB;IAAA;IAcE,UAAU,EAAE;MAAA,OAAM,UAAU,CAACD,IAAX,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB,CAdpB;IAAA;IAeE,mBAAmB,EAAE,CACnB;MAAEC,eAAe,EAAEb,MAAM,CAACc;IAA1B,CADmB,EAEnBhB,mBAFmB;EAfvB,CAAA,CAAA,CADF,CADF;AAwBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  TabActions,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport type {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <TabView\n        {...rest}\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}