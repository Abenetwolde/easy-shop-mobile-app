{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatePicker = undefined;\nvar _jsxFileName = 'src/basic/DatePicker.js';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _platform = require(\"../theme/variables/platform\");\nvar _platform2 = _interopRequireDefault(_platform);\nvar _commonColor = require(\"../theme/variables/commonColor\");\nvar _Text = require(\"./Text\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar DatePicker = exports.DatePicker = function (_React$Component) {\n  _inherits(DatePicker, _React$Component);\n  function DatePicker(props) {\n    _classCallCheck(this, DatePicker);\n    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));\n    _this.showDatePicker = function () {\n      if (_reactNative.Platform.OS === _commonColor.PLATFORM.ANDROID) {\n        _this.openAndroidDatePicker();\n      } else {\n        _this.setState({\n          modalVisible: true\n        });\n      }\n    };\n    _this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate: !props.placeHolderText && props.defaultDate ? props.defaultDate : undefined\n    };\n    return _this;\n  }\n  _createClass(DatePicker, [{\n    key: 'setDate',\n    value: function setDate(date) {\n      this.setState({\n        chosenDate: new Date(date)\n      });\n      if (this.props.onDateChange) {\n        this.props.onDateChange(date);\n      }\n    }\n  }, {\n    key: 'openAndroidDatePicker',\n    value: function openAndroidDatePicker() {\n      var newDate, action, year, month, day, selectedDate, code, message;\n      return _regeneratorRuntime.async(function openAndroidDatePicker$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_reactNative.DatePickerAndroid.open({\n                date: this.state.chosenDate ? this.state.chosenDate : this.state.defaultDate,\n                minDate: this.props.minimumDate,\n                maxDate: this.props.maximumDate,\n                mode: this.props.androidMode\n              }));\n            case 3:\n              newDate = _context.sent;\n              action = newDate.action, year = newDate.year, month = newDate.month, day = newDate.day;\n              if (action === 'dateSetAction') {\n                selectedDate = new Date(year, month, day);\n                this.setState({\n                  chosenDate: selectedDate\n                });\n                this.props.onDateChange(selectedDate);\n              }\n              _context.next = 13;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context['catch'](0);\n              code = _context.t0.code;\n              message = _context.t0.message;\n              console.warn('Cannot open date picker', message);\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 8]]);\n    }\n  }, {\n    key: 'formatChosenDate',\n    value: function formatChosenDate(date) {\n      if (this.props.formatChosenDate) {\n        return this.props.formatChosenDate(date);\n      }\n      return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var _props = this.props,\n        animationType = _props.animationType,\n        disabled = _props.disabled,\n        locale = _props.locale,\n        maximumDate = _props.maximumDate,\n        minimumDate = _props.minimumDate,\n        modalTransparent = _props.modalTransparent,\n        placeHolderText = _props.placeHolderText,\n        placeHolderTextStyle = _props.placeHolderTextStyle,\n        textStyle = _props.textStyle,\n        timeZoneOffsetInMinutes = _props.timeZoneOffsetInMinutes;\n      var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n      return _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        onPress: function onPress() {\n          return !disabled ? _this2.showDatePicker() : undefined;\n        },\n        style: [{\n          padding: variables.datePickerPadding,\n          color: variables.datePickerTextColor\n        }, this.state.chosenDate ? textStyle : placeHolderTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      }, this.state.chosenDate ? this.formatChosenDate(this.state.chosenDate) : placeHolderText || 'Select Date'), _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }, _react2.default.createElement(_reactNative.Modal, {\n        supportedOrientations: ['portrait', 'landscape'],\n        animationType: animationType,\n        transparent: modalTransparent,\n        visible: this.state.modalVisible,\n        onRequestClose: function onRequestClose() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        onPress: function onPress() {\n          return _this2.setState({\n            modalVisible: false\n          });\n        },\n        style: {\n          backgroundColor: variables.datePickerBg,\n          flex: variables.datePickerFlex\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }), _react2.default.createElement(_reactNative.DatePickerIOS, {\n        date: this.state.chosenDate ? this.state.chosenDate : this.state.defaultDate,\n        onDateChange: function onDateChange(date) {\n          return _this2.setDate(date);\n        },\n        minimumDate: minimumDate,\n        maximumDate: maximumDate,\n        mode: 'date',\n        locale: locale,\n        timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        }\n      })))));\n    }\n  }]);\n  return DatePicker;\n}(_react2.default.Component);\nDatePicker.defaultProps = {\n  disabled: false\n};","map":{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","React","Component","defaultProps","disabled","props","state","modalVisible","defaultDate","Date","chosenDate","placeHolderText","undefined","date","setState","onDateChange","showDatePicker","Platform","OS","PLATFORM","ANDROID","openAndroidDatePicker","newDate","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","action","year","month","day","selectedDate","code","message","console","warn","formatChosenDate","getDate","getMonth","getFullYear","join","animationType","locale","modalTransparent","placeHolderTextStyle","textStyle","timeZoneOffsetInMinutes","variables","context","theme","variable","padding","datePickerPadding","color","datePickerTextColor","backgroundColor","datePickerBg","flex","datePickerFlex","setDate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  View,\n  Platform,\n  DatePickerIOS,\n  DatePickerAndroid\n} from 'react-native';\n\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\n\nimport { Text } from './Text';\n\nexport class DatePicker extends React.Component {\n  static defaultProps = {\n    disabled: false\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate:\n        !props.placeHolderText && props.defaultDate\n          ? props.defaultDate\n          : undefined\n    };\n  }\n\n  setDate(date) {\n    this.setState({ chosenDate: new Date(date) });\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  showDatePicker = () => {\n    if (Platform.OS === PLATFORM.ANDROID) {\n      this.openAndroidDatePicker();\n    } else {\n      this.setState({ modalVisible: true });\n    }\n  };\n\n  async openAndroidDatePicker() {\n    try {\n      const newDate = await DatePickerAndroid.open({\n        date: this.state.chosenDate\n          ? this.state.chosenDate\n          : this.state.defaultDate,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.androidMode\n      });\n      const { action, year, month, day } = newDate;\n      if (action === 'dateSetAction') {\n        const selectedDate = new Date(year, month, day);\n        this.setState({ chosenDate: selectedDate });\n        this.props.onDateChange(selectedDate);\n      }\n    } catch ({ code, message }) {\n      console.warn('Cannot open date picker', message);\n    }\n  }\n\n  formatChosenDate(date) {\n    if (this.props.formatChosenDate) {\n      return this.props.formatChosenDate(date);\n    }\n    return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n  }\n\n  render() {\n    const {\n      animationType,\n      disabled,\n      locale,\n      maximumDate,\n      minimumDate,\n      modalTransparent,\n      placeHolderText,\n      placeHolderTextStyle,\n      textStyle,\n      timeZoneOffsetInMinutes\n    } = this.props;\n\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    return (\n      <View>\n        <View>\n          <Text\n            onPress={() => (!disabled ? this.showDatePicker() : undefined)}\n            style={[\n              {\n                padding: variables.datePickerPadding,\n                color: variables.datePickerTextColor\n              },\n              this.state.chosenDate ? textStyle : placeHolderTextStyle\n            ]}\n          >\n            {this.state.chosenDate\n              ? this.formatChosenDate(this.state.chosenDate)\n              : placeHolderText || 'Select Date'}\n          </Text>\n          <View>\n            <Modal\n              supportedOrientations={['portrait', 'landscape']}\n              animationType={animationType}\n              transparent={modalTransparent} // from api\n              visible={this.state.modalVisible}\n              onRequestClose={() => {}}\n            >\n              <Text\n                onPress={() => this.setState({ modalVisible: false })}\n                style={{\n                  backgroundColor: variables.datePickerBg,\n                  flex: variables.datePickerFlex\n                }}\n              />\n              <DatePickerIOS\n                date={\n                  this.state.chosenDate\n                    ? this.state.chosenDate\n                    : this.state.defaultDate\n                }\n                onDateChange={date => this.setDate(date)}\n                minimumDate={minimumDate}\n                maximumDate={maximumDate}\n                mode=\"date\"\n                locale={locale}\n                timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}\n              />\n            </Modal>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}