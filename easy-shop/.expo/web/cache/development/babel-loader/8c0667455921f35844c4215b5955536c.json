{"ast":null,"code":"import React from 'react';\nimport { always, block } from \"../base\";\n\nexport default function useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n  React.useEffect(function () {\n    if (!(nodeFactory instanceof Function)) {\n      console.warn('useCode() first argument should be a function that returns an animation node.');\n      var _node = nodeFactory;\n      nodeFactory = function nodeFactory() {\n        return _node;\n      };\n    }\n    var node = nodeFactory();\n    if (node) {\n      if (node instanceof Array) node = block(node);\n      var animatedAlways = always(node);\n      animatedAlways.__attach();\n\n      return function () {\n        return animatedAlways.__detach();\n      };\n    }\n  }, dependencies);\n}","map":{"version":3,"sources":["useCode.js"],"names":["React","always","block","useCode","nodeFactory","dependencies","useEffect","Function","console","warn","node","Array","animatedAlways","__attach","__detach"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB;;AAaA,eAAe,SAASC,OAAT,CAAiBC,WAAjB,EAA8BC,YAA9B,EAA4C;EACzD,IAAI,EAAEL,KAAK,CAACM,SAANN,YAA2BO,QAA7B,CAAJ,EAA4C;EAE5CP,KAAK,CAACM,SAANN,CAAgB,YAAM;IAEpB,IAAI,EAAEI,WAAW,YAAYG,QAAzB,CAAJ,EAAwC;MACtCC,OAAO,CAACC,IAARD,CACE,+EADFA,CAAAA;MAIA,IAAME,KAAI,GAAGN,WAAb;MACAA,WAAW,GAAG;QAAA,OAAMM,KAApBN;MAAAA;IACD;IAED,IAAIM,IAAI,GAAGN,WAAW,EAAtB;IACA,IAAIM,IAAJ,EAAU;MAER,IAAIA,IAAI,YAAYC,KAApB,EAA2BD,IAAI,GAAGR,KAAK,CAACQ,IAAD,CAAZA;MAE3B,IAAME,cAAc,GAAGX,MAAM,CAACS,IAAD,CAA7B;MACAE,cAAc,CAACC,QAAfD,EALQ;;MAQR,OAAO;QAAA,OAAMA,cAAc,CAACE,QAAfF,EAAb;MAAA;IACD;EACF,CAtBDZ,EAsBGK,YAtBHL,CAAAA;AAuBD","sourcesContent":["import React from 'react';\nimport { always, block } from '../base';\n\n/**\n * @callback NodeFactory\n * Function to create a node or an array of nodes.\n * @returns {(Node[] | Node | null | undefined | Boolean)}\n */\n\n/**\n * React hook to run a node.\n * @param {NodeFactory} nodeFactory Function to build the node to run.\n * @param dependencies Array of dependencies. Refresh the node on changes.\n */\nexport default function useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n\n  React.useEffect(() => {\n    // check and correct 1st parameter\n    if (!(nodeFactory instanceof Function)) {\n      console.warn(\n        'useCode() first argument should be a function that returns an animation node.'\n      );\n\n      const node = nodeFactory;\n      nodeFactory = () => node;\n    }\n\n    let node = nodeFactory();\n    if (node) {\n      // allow factory to return array\n      if (node instanceof Array) node = block(node);\n\n      const animatedAlways = always(node);\n      animatedAlways.__attach();\n\n      // return undo function\n      return () => animatedAlways.__detach();\n    }\n  }, dependencies);\n}\n"]},"metadata":{},"sourceType":"module"}