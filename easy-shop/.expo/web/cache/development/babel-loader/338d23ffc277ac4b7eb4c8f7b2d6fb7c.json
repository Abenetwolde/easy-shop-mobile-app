{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport default function NativeSafeAreaView(_ref) {\n  var children = _ref.children,\n    style = _ref.style,\n    onInsetsChange = _ref.onInsetsChange;\n  React.useEffect(function () {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    var element = createContextElement();\n    document.body.appendChild(element);\n    var onEnd = function onEnd() {\n      var _window$getComputedSt = window.getComputedStyle(element),\n        paddingTop = _window$getComputedSt.paddingTop,\n        paddingBottom = _window$getComputedSt.paddingBottom,\n        paddingLeft = _window$getComputedSt.paddingLeft,\n        paddingRight = _window$getComputedSt.paddingRight;\n      var insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      var frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n\n      onInsetsChange({\n        nativeEvent: {\n          insets: insets,\n          frame: frame\n        }\n      });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return function () {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return React.createElement(View, {\n    style: style\n  }, children);\n}\nvar _supportedTransitionEvent = null;\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n  var element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (var key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\nvar _supportedEnv = null;\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  var _window = window,\n    CSS = _window.CSS;\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\nfunction getInset(side) {\n  return \"\".concat(getSupportedEnv(), \"(safe-area-inset-\").concat(side, \")\");\n}\nfunction createContextElement() {\n  var element = document.createElement('div');\n  var style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"sources":["NativeSafeAreaProvider.tsx"],"names":["React","CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaView","children","style","onInsetsChange","useEffect","document","element","createContextElement","body","appendChild","onEnd","paddingTop","paddingBottom","paddingLeft","paddingRight","window","getComputedStyle","insets","top","parseInt","bottom","left","right","frame","x","y","width","documentElement","offsetWidth","height","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","_supportedTransitionEvent","createElement","key","undefined","_supportedEnv","getSupportedEnv","CSS","supports","getInset","side","position","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { NativeSafeAreaProviderProps } from './SafeArea.types';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions: Record<string, string> = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd',\n};\n\nexport default function NativeSafeAreaView({\n  children,\n  style,\n  onInsetsChange,\n}: NativeSafeAreaProviderProps) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const {\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight,\n      } = window.getComputedStyle(element);\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0,\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight,\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({ nativeEvent: { insets, frame } });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n\n  return <View style={style}>{children}</View>;\n}\n\nlet _supportedTransitionEvent: string | null = null;\nfunction getSupportedTransitionEvent(): string {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key as keyof CSSStyleDeclaration] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\n\ntype CssEnv = 'constant' | 'env';\n\nlet _supportedEnv: CssEnv | null = null;\nfunction getSupportedEnv(): CssEnv {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const { CSS } = window;\n  if (\n    CSS &&\n    CSS.supports &&\n    CSS.supports('top: constant(safe-area-inset-top)')\n  ) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\n\nfunction getInset(side: string): string {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement(): HTMLElement {\n  const element = document.createElement('div');\n  const { style } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n"]},"metadata":{},"sourceType":"module"}