{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport useNavigation from \"./useNavigation\";\n\nexport default function useNavigationState(selector) {\n  var navigation = useNavigation();\n\n  var _React$useState = React.useState(function () {\n      return selector(navigation.dangerouslyGetState());\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    setResult = _React$useState2[1];\n\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.dangerouslyGetState());\n}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["React","useNavigation","useNavigationState","selector","navigation","setResult","useState","dangerouslyGetState","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP;;AASA,eAAe,SAASC,kBAAT,CAA+BC,QAA/B,EAAyD;EACtE,IAAMC,UAAU,GAAGH,aAAa,EADsC;;EAKtE,sBAAsBD,KAAK,CAACM,QAANN,CAAe;MAAA,OACnCG,QAAQ,CAACC,UAAU,CAACG,mBAAXH,EAAD,CADYJ;IAAAA,EALgD;IAAA;IAK7DK,SAAH;;EAKN,IAAMG,WAAW,GAAGR,KAAK,CAACS,MAANT,CAAaG,QAAbH,CAApB;EAEAA,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpBQ,WAAW,CAACG,OAAZH,GAAsBL,QAAtBK;EACD,CAFDR,CAAAA;EAIAA,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpB,IAAMY,WAAW,GAAG,UAAU,CAACC,WAAX,CAAuB,OAAvB,EAAiCC,UAAAA,CAAD,EAAO;MACzDT,SAAS,CAACG,WAAW,CAACG,OAAZH,CAAoBM,CAAC,CAACC,IAAFD,CAAOE,KAA3BR,CAAD,CAATH;IACD,CAFmB,CAApB;IAIA,OAAOO,WAAP;EACD,CANDZ,EAMG,CAACI,UAAD,CANHJ,CAAAA;EAQA,OAAOG,QAAQ,CAACC,UAAU,CAACG,mBAAXH,EAAD,CAAf;AACD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"]},"metadata":{},"sourceType":"module"}