{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nexport default function useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n      var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n      return {\n        height: height,\n        width: width\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    dimensions = _React$useState2[0],\n    setDimensions = _React$useState2[1];\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n        height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: Dimensions.get('window')\n    });\n    Dimensions.addEventListener('change', onChange);\n    return function () {\n      return Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["React","useWindowDimensions","dimensions","setDimensions","useState","height","width","Dimensions","get","useEffect","onChange","window","d","addEventListener","removeEventListener"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;;AAKA,eAAe,SAASC,mBAAT,GAA+B;EAC5C,sBAAoC,KAAK,CAACG,QAAN,CAAe,YAAM;MAEvD,sBAAkCG,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAlC;QAAA,wCAAQF,MAAM;QAANA,MAAM,sCAAG,CAAX;QAAA,wCAAcC,KAAK;QAALA,KAAK,sCAAG,CAAA;MAE5B,OAAO;QAAED,MAAF,EAAEA,MAAF;QAAUC,KAAAA,EAAAA;MAAV,CAAP;IACD,CALmC,CAApC;IAAA;IAAOJ,UAAD;IAAaC,aAAb;EAONH,KAAK,CAACS,SAANT,CAAgB,YAAM;IACpB,IAAMU,QAAQ,GAAG,SAAXA,QAAQ,OAA2C;MAAA,IAArCC,MAAAA,QAAAA,MAAAA;MAClB,IAAQL,KAAF,GAAoBK,MAA1B,CAAQL,KAAF;QAASD,MAAAA,GAAWM,MAA1B,CAAeN,MAAAA;MAEfF,aAAa,CAAES,UAAAA,CAAD,EAAO;QACnB,IAAIN,KAAK,KAAKM,CAAC,CAACN,KAAZA,IAAqBD,MAAM,KAAKO,CAAC,CAACP,MAAtC,EAA8C;UAC5C,OAAOO,CAAP;QACD;QAED,OAAO;UAAEN,KAAF,EAAEA,KAAF;UAASD,MAAAA,EAAAA;QAAT,CAAP;MACD,CANY,CAAbF;IAOD,CAXmB;;IAepBO,QAAQ,CAAC;MAAEC,MAAM,EAAEJ,UAAU,CAACC,GAAXD,CAAe,QAAfA;IAAV,CAAD,CAARG;IAEAH,UAAU,CAACM,gBAAXN,CAA4B,QAA5BA,EAAsCG,QAAtCH,CAAAA;IAEA,OAAO;MAAA,OAAMA,UAAU,CAACO,mBAAXP,CAA+B,QAA/BA,EAAyCG,QAAzCH,CAAb;IAAA;EACD,CApBDP,EAoBG,EApBHA,CAAAA;EAsBA,OAAOE,UAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}