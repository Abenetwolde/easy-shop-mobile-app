{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt, createAnimatedBlock as block } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar AnimatedDebug = function (_AnimatedNode) {\n  _inherits(AnimatedDebug, _AnimatedNode);\n  var _super = _createSuper(AnimatedDebug);\n  function AnimatedDebug(message, value) {\n    var _this;\n    _classCallCheck(this, AnimatedDebug);\n    invariant(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'debug',\n      message: message,\n      value: value\n    }, [value]);\n    _defineProperty(_assertThisInitialized(_this), \"_message\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_value\", void 0);\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n  _createClass(AnimatedDebug, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedDebug, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = val(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n  return AnimatedDebug;\n}(AnimatedNode);\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          a = _ref2[0];\n        return console.log(\"\".concat(message, \" \").concat(a));\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["AnimatedDebug.js"],"names":["invariant","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","constructor","message","value","type","_message","_value","toString","__nodeID","__onEvaluate","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AACA,SAASC,KAAT,EAAgBC,mBAAmB,IAAIC,KAAvC;AACA,SAASC,kBAAkB,IAAIC,IAA/B;AACA,OAAOC,YAAP;AAAA,IAEMC,aAAN;EAAA;EAAA;EAIEC,uBAAYC,OAAD,EAAUC,KAAV,EAAiB;IAAA;IAAA;IAC1BX,SAAS,CACP,OAAOU,OAAP,KAAmB,QADZ,EAAA,kFAAA,CAAA,MAAA,CAE4EA,OAF5E,CAAA,CAATV;IAIAA,SAAS,CACPW,KAAK,YAAYJ,YADV,EAAA,yFAAA,CAAA,MAAA,CAEmFI,KAFnF,CAAA,CAATX;IAIA,0BAAM;MAAEY,IAAI,EAAE,OAAR;MAAiBF,OAAjB,EAAiBA,OAAjB;MAA0BC,KAAAA,EAAAA;IAA1B,CAAN,EAAyC,CAACA,KAAD,CAAzC;IAT0B,eAAA,gCAAA,UAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,gCAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IAU1B,MAAKE,QAAL,GAAgBH,OAAhB;IACA,MAAKI,MAAL,GAAcH,KAAd;IAAA;EACD;EAAA;IAAA;IAAA,OAEDI,oBAAW;MACT,OAAA,qBAAA,CAAA,MAAA,CAA6B,IAAA,CAAKC,QAAlC,CAAA;IACD;EAAA;IAAA;IAAA,OAEDC,wBAAe;MACb,IAAMN,KAAK,GAAGV,GAAG,CAAC,IAAA,CAAKa,MAAN,CAAjB;MACAI,OAAO,CAACC,GAARD,CAAY,IAAA,CAAKL,QAAjBK,EAA2BP,KAA3BO,CAAAA;MACA,OAAOP,KAAP;IACD;EAAA;EAAA;AAAA,EA1ByBJ,YAA5B;AA6BA,OAAO,SAASa,mBAAT,CAA6BV,OAA7B,EAAsCC,KAAtC,EAA6C;EAClD,IAAIU,OAAJ,EAAa;IACX,IAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WADrC;;IAKX,IAAMC,kBAAkB,GACtBC,MAAM,CAACC,IAAPD,IAAeA,MAAM,CAACC,IAAPD,CAAYE,SAAZF,CAAsBG,YAAtBH,KAAuC,YADxD;IAGA,IAAIH,uBAAuB,IAAIE,kBAA/B,EAAmD;MAGjD,OAAOpB,KAAK,CAAC,CACXE,IAAI,CAAC,CAACK,KAAD,CAAD,EAAU;QAAA;UAAEkB,CAAF;QAAA,OAASX,OAAO,CAACC,GAARD,CAAAA,EAAAA,CAAAA,MAAAA,CAAeR,OAAfQ,EAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAA0BW,CAA1BX,CAAAA,CAAnB;MAAA,EADO,EAEXP,KAFW,CAAD,CAAZ;IAID,CAPD,MAOO;MACL,OAAO,IAAIH,aAAJ,CAAkBE,OAAlB,EAA2BR,KAAK,CAACS,KAAD,CAAhC,CAAP;IACD;EAlB+C;;EAqBlD,OAAOA,KAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}