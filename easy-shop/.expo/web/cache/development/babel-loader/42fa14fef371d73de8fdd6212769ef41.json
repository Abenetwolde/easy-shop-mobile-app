{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckBox = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = 'src/basic/Checkbox.js';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Ionicons = require(\"@expo/vector-icons/Ionicons\");\n\nvar _Ionicons2 = _interopRequireDefault(_Ionicons);\n\nvar _nativeBaseShoutemTheme = require('native-base-shoutem-theme');\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nvar _platform = require(\"../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _commonColor = require(\"../theme/variables/commonColor\");\n\nvar _computeProps = require(\"../utils/computeProps\");\n\nvar _computeProps2 = _interopRequireDefault(_computeProps);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CheckBox = function (_Component) {\n  _inherits(CheckBox, _Component);\n\n  function CheckBox() {\n    _classCallCheck(this, CheckBox);\n\n    return _possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));\n  }\n\n  _createClass(CheckBox, [{\n    key: 'getInitialStyle',\n    value: function getInitialStyle(variables) {\n      var _props = this.props,\n          color = _props.color,\n          checked = _props.checked;\n      return {\n        checkStyle: {\n          borderColor: color || variables.checkboxBgColor,\n          backgroundColor: checked === true ? color || variables.checkboxBgColor : variables.checkboxDefaultColor\n        }\n      };\n    }\n  }, {\n    key: 'prepareRootProps',\n    value: function prepareRootProps(variables) {\n      var defaultProps = {\n        style: this.getInitialStyle(variables).checkStyle\n      };\n      return (0, _computeProps2.default)(this.props, defaultProps);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var checked = this.props.checked;\n      var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n      var platformStyle = variables.platformStyle;\n      var platform = variables.platform;\n      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({\n        ref: function ref(c) {\n          return _this2._root = c;\n        }\n      }, this.prepareRootProps(variables), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        }\n      }), _react2.default.createElement(_Ionicons2.default, {\n        style: {\n          color: checked === true ? variables.checkboxTickColor : variables.checkboxDefaultColor,\n          fontSize: variables.CheckboxFontSize,\n          lineHeight: variables.CheckboxIconSize,\n          marginTop: variables.CheckboxIconMarginTop,\n          textShadowRadius: variables.checkboxTextShadowRadius\n        },\n        name: platform === _commonColor.PLATFORM.IOS && platformStyle !== _commonColor.PLATFORM.MATERIAL ? 'ios-checkmark' : 'md-checkmark',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }));\n    }\n  }]);\n\n  return CheckBox;\n}(_react.Component);\n\nCheckBox.contextTypes = {\n  theme: _propTypes2.default.object\n};\nCheckBox.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),\n  checked: _propTypes2.default.bool,\n  onPress: _propTypes2.default.func\n});\nvar StyledCheckBox = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.CheckBox', {}, _mapPropsToStyleNames2.default)(CheckBox);\nexports.CheckBox = StyledCheckBox;","map":{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","Component","contextTypes","theme","PropTypes","variables","color","checked","checkStyle","borderColor","backgroundColor","defaultProps","style","variable","platformStyle","platform","fontSize","lineHeight","marginTop","textShadowRadius","PLATFORM","TouchableOpacity","onPress","StyledCheckBox","mapPropsToStyleNames"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked } = this.props;\n    return {\n      checkStyle: {\n        borderColor: color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked } = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]},"metadata":{},"sourceType":"script"}