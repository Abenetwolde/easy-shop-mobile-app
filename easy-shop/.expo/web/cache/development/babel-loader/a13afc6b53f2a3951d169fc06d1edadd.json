{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.List = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = 'src/basic/List.js';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _nativeBaseShoutemTheme = require('native-base-shoutem-theme');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar List = function (_Component) {\n  _inherits(List, _Component);\n\n  function List() {\n    _classCallCheck(this, List);\n\n    return _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).apply(this, arguments));\n  }\n\n  _createClass(List, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var dataArray = this.props.dataArray;\n\n      if (dataArray) {\n        return _react2.default.createElement(_reactNative.FlatList, _extends({\n          ref: function ref(_ref2) {\n            return _this2._root = _ref2;\n          },\n          data: dataArray,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item,\n                index = _ref.index;\n            return _this2.props.renderItem ? _this2.props.renderItem({\n              item: item,\n              index: index\n            }) : _this2.props.renderRow(item, 0, index);\n          }\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          }\n        }));\n      }\n\n      return _react2.default.createElement(_reactNative.View, _extends({\n        ref: function ref(c) {\n          return _this2._root = c;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        }\n      }));\n    }\n  }]);\n\n  return List;\n}(_react.Component);\n\nvar StyledList = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.List', {}, _mapPropsToStyleNames2.default)(List);\nexports.List = StyledList;","map":{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","Component","dataArray","item","index","StyledList","mapPropsToStyleNames"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,uBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;qCACA,M;;;;AAEA,IAAA,qBAAA,GAAA,OAAA,iCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEMA;;AAAAA,IAAAA,I;;;;;;;;;;;6BACK;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UACCE,SADD,GACe,KADf,KACe,CADf,SAAA;;AAGP,UAAA,SAAA,EAAe;AACb,eACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,QAAA,EAAA,QAAA,CAAA;AACE,UAAA,GAAA,EAAK,SAAA,GAAA,CAAA,KAAA,EAAA;AAAA,mBAAQ,MAAA,CAAA,KAAA,GAAR,KAAA;AADP,WAAA;AAEE,UAAA,IAAA,EAFF,SAAA;AAGE,UAAA,UAAA,EAAY,SAAA,UAAA,CAAA,IAAA,EAAA;AAAA,gBAAGC,IAAH,GAAA,IAAA,CAAA,IAAA;AAAA,gBAASC,KAAT,GAAA,IAAA,CAAA,KAAA;AAAA,mBACV,MAAA,CAAA,KAAA,CAAA,UAAA,GACI,MAAA,CAAA,KAAA,CAAA,UAAA,CAAsB;AAAED,cAAAA,IAAAA,EAAF,IAAA;AAAQC,cAAAA,KAAAA,EADlC;AAC0B,aAAtB,CADJ,GAEI,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAAA,EAHM,KAGN,CAHM;AAHd;AAAA,SAAA,EAQM,KARN,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EADF;AACE;AAAA,SAAA,CAAA,CADF;AAaF;;AAAA,aAAO,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA;AAAM,QAAA,GAAA,EAAK,SAAA,GAAA,CAAA,CAAA,EAAA;AAAA,iBAAM,MAAA,CAAA,KAAA,GAAN,CAAA;AAAX;AAAA,OAAA,EAAsC,KAAtC,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAP;AAAO;AAAA,OAAA,CAAA,CAAP;;;;;EAlBeH,MAAAA,CAAAA,S,CAAbD;;AAsBN,IAAMK,UAAAA,GAAa,CAAA,GAAA,uBAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,EAAA,EAAoCC,sBAAAA,CAApC,OAAA,EAAnB,IAAmB,CAAnB;QAIuBN,I,GAAdK,U","sourcesContent":["import { connectStyle } from 'native-base-shoutem-theme';\nimport React, { Component } from 'react';\nimport { FlatList, View } from 'react-native';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nclass List extends Component {\n  render() {\n    const { dataArray } = this.props;\n\n    if (dataArray) {\n      return (\n        <FlatList\n          ref={ref => (this._root = ref)}\n          data={dataArray}\n          renderItem={({ item, index }) =>\n            this.props.renderItem\n              ? this.props.renderItem({ item, index })\n              : this.props.renderRow(item, 0, index)\n          }\n          {...this.props}\n        />\n      );\n    }\n    return <View ref={c => (this._root = c)} {...this.props} />;\n  }\n}\n\nconst StyledList = connectStyle('NativeBase.List', {}, mapPropsToStyleNames)(\n  List\n);\n\nexport { StyledList as List };\n"]},"metadata":{},"sourceType":"script"}