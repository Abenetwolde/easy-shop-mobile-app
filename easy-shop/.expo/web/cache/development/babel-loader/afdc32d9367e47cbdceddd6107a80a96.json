{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\n\nexport default function useOnRouteFocus(_ref) {\n  var router = _ref.router,\n    getState = _ref.getState,\n    sourceRouteKey = _ref.key,\n    setState = _ref.setState;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    onRouteFocusParent = _React$useContext.onRouteFocus;\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","key","sourceRouteKey","setState","onRouteFocus","onRouteFocusParent","useContext","useCallback","state","result","getStateForRouteFocus","undefined"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAMA,OAAOC,wBAAP;;AAcA,eAAe,SAASC,eAAT,OAKK;EAAA,IAJlBC,MADuE,QACvEA,MADuE;IAEvEC,QAFuE,QAEvEA,QAFuE;IAGlEE,cAHkE,QAGvED,GAAG;IACHE,QAAAA,QAAAA,QAAAA;EAEA,wBAA6CP,KAAK,CAACU,UAANV,CAC3CC,wBAD2CD,CAA7C;IAAsBS,kBAAAA,qBAAdD,YAAY;EAIpB,OAAO,KAAK,CAACG,WAAN,CACJN,UAAAA,GAAD,EAAiB;IACf,IAAMO,KAAK,GAAGR,QAAQ,EAAtB;IACA,IAAMS,MAAM,GAAGV,MAAM,CAACW,qBAAPX,CAA6BS,KAA7BT,EAAoCE,GAApCF,CAAf;IAEA,IAAIU,MAAM,KAAKD,KAAf,EAAsB;MACpBL,QAAQ,CAACM,MAAD,CAARN;IACD;IAED,IAAIE,kBAAkB,KAAKM,SAAvBN,IAAoCH,cAAc,KAAKS,SAA3D,EAAsE;MACpEN,kBAAkB,CAACH,cAAD,CAAlBG;IACD;EACF,CAZI,EAaL,CAACL,QAAD,EAAWK,kBAAX,EAA+BN,MAA/B,EAAuCI,QAAvC,EAAiDD,cAAjD,CAbK,CAAP;AAeD","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}