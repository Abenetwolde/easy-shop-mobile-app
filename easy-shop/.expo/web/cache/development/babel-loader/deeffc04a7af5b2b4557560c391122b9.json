{"ast":null,"code":"import _ from \"lodash\";\nimport customMerge from \"./customMerge\";\n\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction splitStyle(style) {\n  return _.reduce(style, function (result, value, key) {\n    var styleSection = result.componentStyle;\n    if (isStyleVariant(key)) {\n      styleSection = result.styleVariants;\n    } else if (isChildStyle(key)) {\n      styleSection = result.childrenStyle;\n    }\n    styleSection[key] = value;\n    return result;\n  }, {\n    componentStyle: {},\n    styleVariants: {},\n    childrenStyle: {}\n  });\n}\n\nexport function resolveComponentStyle(componentName) {\n  var styleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var themeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var parentStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var themeCache = arguments.length > 4 ? arguments[4] : undefined;\n\n  var mergedStyle = customMerge(themeStyle, parentStyle[componentName]);\n  styleNames.forEach(function (sn, index) {\n    mergedStyle = customMerge(mergedStyle, themeStyle[\"\" + sn]);\n  });\n  styleNames.forEach(function (sn, index) {\n    mergedStyle = customMerge(mergedStyle, parentStyle[\"\" + componentName + sn]);\n  });\n\n  var resolvedStyle = customMerge(mergedStyle, parentStyle[componentName]);\n  styleNames.forEach(function (sn, index) {\n    resolvedStyle = customMerge(resolvedStyle, mergedStyle[\"\" + sn]);\n  });\n  styleNames.forEach(function (sn, index) {\n    resolvedStyle = customMerge(resolvedStyle, parentStyle[\"\" + componentName + sn]);\n  });\n  return resolvedStyle;\n}","map":{"version":3,"names":["_","customMerge","isStyleVariant","propertyName","test","isChildStyle","splitStyle","style","reduce","result","value","key","styleSection","componentStyle","styleVariants","childrenStyle","resolveComponentStyle","componentName","styleNames","themeStyle","parentStyle","themeCache","mergedStyle","forEach","sn","index","resolvedStyle"],"sources":["C:/Users/AfroMiNA/OneDrive/Desktop/ecom/mern-stack-ecommerce/easy-shop/node_modules/native-base-shoutem-theme/src/resolveComponentStyle.js"],"sourcesContent":["import _ from \"lodash\";\nimport customMerge from \"./customMerge\";\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\n/**\n * Splits the style into its parts:\n * component style - concrete style that needs to be applied to a component\n * style variants - variants that can be applied to a component by using styleName prop\n * children style - style rules that need to be propagated to component children\n *\n * @param style The style to split.\n * @returns {*} An object with the componentStyle, styleVariants, and childrenStyle keys.\n */\nfunction splitStyle(style) {\n  return _.reduce(\n    style,\n    (result, value, key) => {\n      let styleSection = result.componentStyle;\n      if (isStyleVariant(key)) {\n        styleSection = result.styleVariants;\n      } else if (isChildStyle(key)) {\n        styleSection = result.childrenStyle;\n      }\n      styleSection[key] = value;\n      return result;\n    },\n    {\n      componentStyle: {},\n      styleVariants: {},\n      childrenStyle: {}\n    }\n  );\n}\n\n/**\n * Resolves the final component style by merging all of the styles that can be\n * applied to a component in the proper order.\n *\n * This function extracts the applicable parts of the theme, parent and element\n * styles, and merges the styles that target the component, and component variants\n * with those styles to get the final style.\n *\n * The styles are merged in the following order, where the styles with the\n * higher index override the styles with the lower one:\n * 1. Theme component style\n * 2. Parent component style\n * 3. Theme style variants specified through styleName\n * 4. Parent style variants specified through styleName\n * 5. Element style passed through the style prop\n *\n * @param componentName The component name ('shoutem.ui.Text')\n * @param styleName Style names ('large rounded')\n * @param themeStyle The theme style that should include the theme and base component style\n * @param parentStyle The style rules inherited from the parent component\n * @param elementStyle The style passed through the style prop of the component\n * @returns {{componentStyle, childrenStyle}} The resolved component and children styles.\n */\nexport function resolveComponentStyle(\n  componentName,\n  styleNames = [],\n  themeStyle = {},\n  parentStyle = {},\n  themeCache\n) {\n  // const mergedStyle = _.merge({},\n  //   themeStyle,\n  //   parentStyle['*'],\n  //   parentStyle[componentName],\n  //   ..._.map(styleNames, (sn) => themeStyle[`.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`])\n  // );\n\n  let mergedStyle = customMerge(themeStyle, parentStyle[componentName]);\n  styleNames.forEach((sn, index) => {\n    mergedStyle = customMerge(mergedStyle, themeStyle[`${sn}`]);\n  });\n\n  styleNames.forEach((sn, index) => {\n    mergedStyle = customMerge(\n      mergedStyle,\n      parentStyle[`${componentName}${sn}`]\n    );\n  });\n\n  // Phase 2: merge the component styles, this step is performed by using the\n  // style from phase 1, so that we are sure that the final style variants are\n  // applied to component style.\n  // const resolvedStyle = _.merge({},\n  //   mergedStyle,\n  //   parentStyle['*'],\n  //   parentStyle[componentName],\n  //   ..._.map(styleNames, (sn) => mergedStyle[`.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`])\n  // );\n\n  let resolvedStyle = customMerge(mergedStyle, parentStyle[componentName]);\n\n  styleNames.forEach((sn, index) => {\n    resolvedStyle = customMerge(resolvedStyle, mergedStyle[`${sn}`]);\n  });\n\n  styleNames.forEach((sn, index) => {\n    resolvedStyle = customMerge(\n      resolvedStyle,\n      parentStyle[`${componentName}${sn}`]\n    );\n  });\n\n  return resolvedStyle;\n}\n"],"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,OAAOC,WAAW;;AAWlB,SAASC,cAAc,CAACC,YAAY,EAAE;EACpC,OAAO,KAAK,CAACC,IAAI,CAACD,YAAY,CAAC;AACjC;;AAcA,SAASE,YAAY,CAACF,YAAY,EAAE;EAClC,OAAO,mBAAmB,CAACC,IAAI,CAACD,YAAY,CAAC;AAC/C;;AAWA,SAASG,UAAU,CAACC,KAAK,EAAE;EACzB,OAAOP,CAAC,CAACQ,MAAM,CACbD,KAAK,EACL,UAACE,MAAM,EAAEC,KAAK,EAAEC,GAAG,EAAK;IACtB,IAAIC,YAAY,GAAGH,MAAM,CAACI,cAAc;IACxC,IAAIX,cAAc,CAACS,GAAG,CAAC,EAAE;MACvBC,YAAY,GAAGH,MAAM,CAACK,aAAa;IACrC,CAAC,MAAM,IAAIT,YAAY,CAACM,GAAG,CAAC,EAAE;MAC5BC,YAAY,GAAGH,MAAM,CAACM,aAAa;IACrC;IACAH,YAAY,CAACD,GAAG,CAAC,GAAGD,KAAK;IACzB,OAAOD,MAAM;EACf,CAAC,EACD;IACEI,cAAc,EAAE,CAAC,CAAC;IAClBC,aAAa,EAAE,CAAC,CAAC;IACjBC,aAAa,EAAE,CAAC;EAClB,CAAC,CACF;AACH;;AAyBA,OAAO,SAASC,qBAAqB,CACnCC,aAAa,EAKb;EAAA,IAJAC,UAAU,uEAAG,EAAE;EAAA,IACfC,UAAU,uEAAG,CAAC,CAAC;EAAA,IACfC,WAAW,uEAAG,CAAC,CAAC;EAAA,IAChBC,UAAU;;EAWV,IAAIC,WAAW,GAAGrB,WAAW,CAACkB,UAAU,EAAEC,WAAW,CAACH,aAAa,CAAC,CAAC;EACrEC,UAAU,CAACK,OAAO,CAAC,UAACC,EAAE,EAAEC,KAAK,EAAK;IAChCH,WAAW,GAAGrB,WAAW,CAACqB,WAAW,EAAEH,UAAU,MAAIK,EAAE,CAAG,CAAC;EAC7D,CAAC,CAAC;EAEFN,UAAU,CAACK,OAAO,CAAC,UAACC,EAAE,EAAEC,KAAK,EAAK;IAChCH,WAAW,GAAGrB,WAAW,CACvBqB,WAAW,EACXF,WAAW,MAAIH,aAAa,GAAGO,EAAE,CAAG,CACrC;EACH,CAAC,CAAC;;EAcF,IAAIE,aAAa,GAAGzB,WAAW,CAACqB,WAAW,EAAEF,WAAW,CAACH,aAAa,CAAC,CAAC;EAExEC,UAAU,CAACK,OAAO,CAAC,UAACC,EAAE,EAAEC,KAAK,EAAK;IAChCC,aAAa,GAAGzB,WAAW,CAACyB,aAAa,EAAEJ,WAAW,MAAIE,EAAE,CAAG,CAAC;EAClE,CAAC,CAAC;EAEFN,UAAU,CAACK,OAAO,CAAC,UAACC,EAAE,EAAEC,KAAK,EAAK;IAChCC,aAAa,GAAGzB,WAAW,CACzByB,aAAa,EACbN,WAAW,MAAIH,aAAa,GAAGO,EAAE,CAAG,CACrC;EACH,CAAC,CAAC;EAEF,OAAOE,aAAa;AACtB"},"metadata":{},"sourceType":"module"}