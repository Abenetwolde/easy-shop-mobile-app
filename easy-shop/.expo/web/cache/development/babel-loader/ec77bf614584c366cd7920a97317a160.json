{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _stateToPropMappings;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from \"./RNGestureHandlerModule\";\nimport State from \"./State\";\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\nvar _NativeModules$UIMana = NativeModules.UIManager,\n  UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\n\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.getConstants().genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n  oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n  _UIManager$clearJSRes = UIManager.clearJSResponder,\n  oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar handlerTag = 1;\nvar handlerIDToTag = {};\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var res = _objectSpread({}, defaults);\n  Object.keys(validProps).forEach(function (key) {\n    var value = props[key];\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n      res[key] = _value;\n    }\n  });\n  return res;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n  return handlerIDs.map(function (handlerID) {\n    return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(handlerName) {\n  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var transformProps = arguments.length > 3 ? arguments[3] : undefined;\n  var customNativeProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n    var _super = _createSuper(Handler);\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _super.call(this, props);\n      _this._onGestureHandlerEvent = function (event) {\n        if (event.nativeEvent.handlerTag === _this._handlerTag) {\n          _this.props.onGestureEvent && _this.props.onGestureEvent(event);\n        } else {\n          _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);\n        }\n      };\n      _this._onGestureHandlerStateChange = function (event) {\n        if (event.nativeEvent.handlerTag === _this._handlerTag) {\n          _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);\n          var stateEventName = stateToPropMappings[event.nativeEvent.state];\n          if (typeof _this.props[stateEventName] === 'function') {\n            _this.props[stateEventName](event);\n          }\n        } else {\n          _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);\n        }\n      };\n      _this._refHandler = function (node) {\n        _this._viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      };\n      _this._createGestureHandler = function (newConfig) {\n        _this._config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(handlerName, _this._handlerTag, newConfig);\n      };\n      _this._attachGestureHandler = function (newViewTag) {\n        _this._viewTag = newViewTag;\n        RNGestureHandlerModule.attachGestureHandler(_this._handlerTag, newViewTag);\n      };\n      _this._updateGestureHandler = function (newConfig) {\n        _this._config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this._handlerTag, newConfig);\n      };\n      _this._handlerTag = handlerTag++;\n      _this._config = {};\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n        handlerIDToTag[props.id] = _this._handlerTag;\n      }\n      return _this;\n    }\n    _createClass(Handler, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        RNGestureHandlerModule.dropGestureHandler(this._handlerTag);\n        if (this._updateEnqueued) {\n          clearImmediate(this._updateEnqueued);\n        }\n        if (this.props.id) {\n          delete handlerIDToTag[this.props.id];\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        if (hasUnresolvedRefs(this.props)) {\n          this._updateEnqueued = setImmediate(function () {\n            _this2._updateEnqueued = null;\n            _this2._update();\n          });\n        }\n        this._createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config));\n        this._attachGestureHandler(findNodeHandle(this._viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this._viewNode);\n        if (this._viewTag !== viewTag) {\n          this._attachGestureHandler(viewTag);\n        }\n        this._update();\n      }\n    }, {\n      key: \"_update\",\n      value: function _update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config);\n        if (!deepEqual(this._config, newConfig)) {\n          this._updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, _objectSpread(_objectSpread({}, this.constructor.propTypes), customNativeProps), config);\n        this._updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this._onGestureHandlerEvent;\n        var _this$props = this.props,\n          onGestureEvent = _this$props.onGestureEvent,\n          onGestureHandlerEvent = _this$props.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = this.props.onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this._onGestureHandlerStateChange;\n        var _this$props2 = this.props,\n          onHandlerStateChange = _this$props2.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = this.props.onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, {\n          ref: this._refHandler,\n          collapsable: false,\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        }, grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n  Handler.displayName = handlerName;\n  Handler.propTypes = propTypes;\n  return Handler;\n}","map":{"version":3,"names":["React","deepEqual","RNGestureHandlerModule","State","findNodeHandle","node","Platform","OS","findNodeHandleRN","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","keys","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","_handlerTag","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","handlerName","propTypes","config","transformProps","customNativeProps","Handler","_onGestureHandlerEvent","event","nativeEvent","onGestureEvent","_onGestureHandlerStateChange","onHandlerStateChange","stateEventName","state","_refHandler","_viewNode","child","Children","only","children","ref","_createGestureHandler","newConfig","_config","createGestureHandler","_attachGestureHandler","newViewTag","_viewTag","attachGestureHandler","_updateGestureHandler","updateGestureHandler","id","Error","dropGestureHandler","_updateEnqueued","clearImmediate","setImmediate","_update","constructor","viewTag","updates","mergedProps","gestureEventHandler","gestureStateEventHandler","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","collapsable","Component"],"sources":["C:/Users/AfroMiNA/OneDrive/Desktop/ecom/mern-stack-ecommerce/easy-shop/node_modules/react-native-gesture-handler/createHandler.js"],"sourcesContent":["import React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Touchable,\n  Platform,\n} from 'react-native';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from './RNGestureHandlerModule';\nimport State from './State';\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = {\n    ...UIManager.getConstants().genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {},\n  clearJSResponder: oldClearJSResponder = () => {},\n} = UIManager;\nUIManager.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) || !('__isNative' in param)) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(props, validProps, defaults = {}) {\n  const res = { ...defaults };\n  Object.keys(validProps).forEach(key => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(({ current }) => current).filter(handle => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      handlerID =>\n        handlerIDToTag[handlerID] ||\n        (handlerID.current && handlerID.current._handlerTag) ||\n        -1\n    )\n    .filter(handlerTag => handlerTag > 0);\n}\n\nfunction hasUnresolvedRefs(props) {\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(r => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n};\n\nexport default function createHandler(\n  handlerName,\n  propTypes = {},\n  config = {},\n  transformProps,\n  customNativeProps = {}\n) {\n  class Handler extends React.Component {\n    static displayName = handlerName;\n\n    static propTypes = propTypes;\n\n    constructor(props) {\n      super(props);\n      this._handlerTag = handlerTag++;\n      this._config = {};\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this._handlerTag;\n      }\n    }\n\n    _onGestureHandlerEvent = event => {\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\n        this.props.onGestureEvent && this.props.onGestureEvent(event);\n      } else {\n        this.props.onGestureHandlerEvent &&\n          this.props.onGestureHandlerEvent(event);\n      }\n    };\n\n    _onGestureHandlerStateChange = event => {\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\n        this.props.onHandlerStateChange &&\n          this.props.onHandlerStateChange(event);\n\n        const stateEventName = stateToPropMappings[event.nativeEvent.state];\n        if (typeof this.props[stateEventName] === 'function') {\n          this.props[stateEventName](event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange &&\n          this.props.onGestureHandlerStateChange(event);\n      }\n    };\n\n    _refHandler = node => {\n      this._viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      const { ref } = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    _createGestureHandler = newConfig => {\n      this._config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        handlerName,\n        this._handlerTag,\n        newConfig\n      );\n    };\n\n    _attachGestureHandler = newViewTag => {\n      this._viewTag = newViewTag;\n\n      RNGestureHandlerModule.attachGestureHandler(this._handlerTag, newViewTag);\n    };\n\n    _updateGestureHandler = newConfig => {\n      this._config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this._handlerTag, newConfig);\n    };\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this._handlerTag);\n      if (this._updateEnqueued) {\n        clearImmediate(this._updateEnqueued);\n      }\n      if (this.props.id) {\n        delete handlerIDToTag[this.props.id];\n      }\n    }\n\n    componentDidMount() {\n      if (hasUnresolvedRefs(this.props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this._updateEnqueued = setImmediate(() => {\n          this._updateEnqueued = null;\n          this._update();\n        });\n      }\n\n      this._createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          { ...this.constructor.propTypes, ...customNativeProps },\n          config\n        )\n      );\n      this._attachGestureHandler(findNodeHandle(this._viewNode));\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this._viewNode);\n      if (this._viewTag !== viewTag) {\n        this._attachGestureHandler(viewTag);\n      }\n      this._update();\n    }\n\n    _update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        { ...this.constructor.propTypes, ...customNativeProps },\n        config\n      );\n      if (!deepEqual(this._config, newConfig)) {\n        this._updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        { ...this.constructor.propTypes, ...customNativeProps },\n        config\n      );\n      this._updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this._onGestureHandlerEvent;\n      const { onGestureEvent, onGestureHandlerEvent } = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = this.props.onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this._onGestureHandlerStateChange;\n      const { onHandlerStateChange, onGestureHandlerStateChange } = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = this.props.onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      const child = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n      return React.cloneElement(\n        child,\n        {\n          ref: this._refHandler,\n          collapsable: false,\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}