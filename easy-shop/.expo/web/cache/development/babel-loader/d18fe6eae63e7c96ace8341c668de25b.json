{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default function useThenable(create) {\n  var _React$useState = React.useState(create),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    promise = _React$useState2[0];\n  var initialState = [false, undefined];\n\n  promise.then(function (result) {\n    initialState = [true, result];\n  });\n  var _React$useState3 = React.useState(initialState),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    state = _React$useState4[0],\n    setState = _React$useState4[1];\n  var _state = _slicedToArray(state, 1),\n    resolved = _state[0];\n  React.useEffect(function () {\n    var cancelled = false;\n    var resolve = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var result;\n        try {\n          result = yield promise;\n        } finally {\n          if (!cancelled) {\n            setState([true, result]);\n          }\n        }\n      });\n      return function resolve() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    if (!resolved) {\n      resolve();\n    }\n    return function () {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}","map":{"version":3,"sources":["useThenable.tsx"],"names":["React","useThenable","create","promise","useState","initialState","undefined","then","result","state","setState","resolved","useEffect","cancelled","resolve"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,WAAT,CAAwBC,MAAxB,EAAsD;EACnE,sBAAkBF,KAAK,CAACI,QAANJ,CAAeE,MAAfF,CAAlB;IAAA;IAAOG,OAAD;EAEN,IAAIE,YAAsC,GAAG,CAAC,KAAD,EAAQC,SAAR,CAHsB;;EAMnEH,OAAO,CAACI,IAARJ,CAAcK,UAAAA,MAAD,EAAY;IACvBH,YAAY,GAAG,CAAC,IAAD,EAAOG,MAAP,CAAfH;EACD,CAFDF,CAAAA;EAIA,uBAA0BH,KAAK,CAACI,QAANJ,CAAeK,YAAfL,CAA1B;IAAA;IAAOS,KAAD;IAAQC,QAAR;EACN,4BAAmBD,KAAnB;IAAOE,QAAD;EAENX,KAAK,CAACY,SAANZ,CAAgB,YAAM;IACpB,IAAIa,SAAS,GAAG,KAAhB;IAEA,IAAMC,OAAO;MAAA,6BAAG,aAAY;QAC1B,IAAIN,MAAJ;QAEA,IAAI;UACFA,MAAM,SAASL,OAAfK;QACD,CAFD,SAEU;UACR,IAAI,CAACK,SAAL,EAAgB;YACdH,QAAQ,CAAC,CAAC,IAAD,EAAOF,MAAP,CAAD,CAARE;UACD;QACF;MACF,CAVD;MAAA,gBAAMI,OAAO;QAAA;MAAA;IAAA,GAAb;IAYA,IAAI,CAACH,QAAL,EAAe;MACbG,OAAO,EAAA;IACR;IAED,OAAO,YAAM;MACXD,SAAS,GAAG,IAAZA;IACD,CAFD;EAGD,CAtBDb,EAsBG,CAACG,OAAD,EAAUQ,QAAV,CAtBHX,CAAAA;EAwBA,OAAOS,KAAP;AACD","sourcesContent":["import * as React from 'react';\n\nexport default function useThenable<T>(create: () => PromiseLike<T>) {\n  const [promise] = React.useState(create);\n\n  let initialState: [boolean, T | undefined] = [false, undefined];\n\n  // Check if our thenable is synchronous\n  promise.then((result) => {\n    initialState = [true, result];\n  });\n\n  const [state, setState] = React.useState(initialState);\n  const [resolved] = state;\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}