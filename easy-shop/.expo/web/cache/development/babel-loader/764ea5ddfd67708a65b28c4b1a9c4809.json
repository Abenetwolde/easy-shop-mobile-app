{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar AnimatedCond = function (_AnimatedNode) {\n  _inherits(AnimatedCond, _AnimatedNode);\n  var _super = _createSuper(AnimatedCond);\n  function AnimatedCond(condition, ifBlock, elseBlock) {\n    var _this;\n    _classCallCheck(this, AnimatedCond);\n    invariant(condition instanceof AnimatedNode, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \".concat(condition));\n    invariant(ifBlock instanceof AnimatedNode, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \".concat(ifBlock));\n    invariant(elseBlock instanceof AnimatedNode || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \".concat(elseBlock));\n    _this = _super.call(this, {\n      type: 'cond',\n      cond: condition,\n      ifBlock: ifBlock,\n      elseBlock: elseBlock\n    }, [condition, ifBlock, elseBlock]);\n    _defineProperty(_assertThisInitialized(_this), \"_condition\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_ifBlock\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_elseBlock\", void 0);\n    _this._condition = condition;\n    _this._ifBlock = ifBlock;\n    _this._elseBlock = elseBlock;\n    return _this;\n  }\n  _createClass(AnimatedCond, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedCond, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (val(this._condition)) {\n        return val(this._ifBlock);\n      } else {\n        return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n      }\n    }\n  }]);\n  return AnimatedCond;\n}(AnimatedNode);\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n}","map":{"version":3,"sources":["AnimatedCond.js"],"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","constructor","condition","ifBlock","elseBlock","undefined","type","cond","_condition","_ifBlock","_elseBlock","toString","__nodeID","__onEvaluate","createAnimatedCond"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT;AACA,SAASC,GAAT;AACA,OAAOC,YAAP;AAAA,IAEMC,YAAN;EAAA;EAAA;EAKEC,sBAAYC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,EAAgC;IAAA;IAAA;IACzCR,SAAS,CACPM,SAAS,YAAYH,YADd,EAAA,uFAAA,CAAA,MAAA,CAEiFG,SAFjF,CAAA,CAATN;IAIAA,SAAS,CACPO,OAAO,YAAYJ,YADZ,EAAA,wFAAA,CAAA,MAAA,CAEkFI,OAFlF,CAAA,CAATP;IAIAA,SAAS,CACPQ,SAAS,YAAYL,YAArBK,IAAqCA,SAAS,KAAKC,SAD5C,EAAA,8GAAA,CAAA,MAAA,CAEwGD,SAFxG,CAAA,CAATR;IAIA,0BACE;MACEU,IAAI,EAAE,MADR;MAEEC,IAAI,EAAEL,SAFR;MAGEC,OAHF,EAGEA,OAHF;MAIEC,SAAAA,EAAAA;IAJF,CADF,EAOE,CAACF,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAPF;IAbyC,eAAA,gCAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,gCAAA,UAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,gCAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IAsBzC,MAAKI,UAAL,GAAkBN,SAAlB;IACA,MAAKO,QAAL,GAAgBN,OAAhB;IACA,MAAKO,UAAL,GAAkBN,SAAlB;IAAA;EACD;EAAA;IAAA;IAAA,OAEDO,oBAAW;MACT,OAAA,oBAAA,CAAA,MAAA,CAA4B,IAAA,CAAKC,QAAjC,CAAA;IACD;EAAA;IAAA;IAAA,OAEDC,wBAAe;MACb,IAAIf,GAAG,CAAC,IAAA,CAAKU,UAAN,CAAP,EAA0B;QACxB,OAAOV,GAAG,CAAC,IAAA,CAAKW,QAAN,CAAV;MACD,CAFD,MAEO;QACL,OAAO,IAAA,CAAKC,UAAL,KAAoBL,SAApB,GAAgCP,GAAG,CAAC,IAAA,CAAKY,UAAN,CAAnC,GAAuDL,SAA9D;MACD;IACF;EAAA;EAAA;AAAA,EA1CwBN,YAA3B;AA6CA,OAAO,SAASe,kBAAT,CAA4BP,IAA5B,EAAkCJ,OAAlC,EAA2CC,SAA3C,EAAsD;EAC3D,OAAO,IAAIJ,YAAJ,CACLH,KAAK,CAACU,IAAD,CADA,EAELV,KAAK,CAACM,OAAD,CAFA,EAGLC,SAAS,KAAKC,SAAdD,GAA0BC,SAA1BD,GAAsCP,KAAK,CAACO,SAAD,CAHtC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}