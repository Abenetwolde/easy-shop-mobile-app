{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nvar EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n    cardOverlay = _ref.cardOverlay,\n    cardOverlayEnabled = _ref.cardOverlayEnabled,\n    cardShadowEnabled = _ref.cardShadowEnabled,\n    cardStyle = _ref.cardStyle,\n    cardStyleInterpolator = _ref.cardStyleInterpolator,\n    closing = _ref.closing,\n    gesture = _ref.gesture,\n    focused = _ref.focused,\n    gestureDirection = _ref.gestureDirection,\n    gestureEnabled = _ref.gestureEnabled,\n    gestureResponseDistance = _ref.gestureResponseDistance,\n    gestureVelocityImpact = _ref.gestureVelocityImpact,\n    getPreviousScene = _ref.getPreviousScene,\n    getFocusedRoute = _ref.getFocusedRoute,\n    mode = _ref.mode,\n    headerMode = _ref.headerMode,\n    headerShown = _ref.headerShown,\n    headerStyleInterpolator = _ref.headerStyleInterpolator,\n    hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n    headerHeight = _ref.headerHeight,\n    onHeaderHeightChange = _ref.onHeaderHeightChange,\n    isParentHeaderShown = _ref.isParentHeaderShown,\n    index = _ref.index,\n    layout = _ref.layout,\n    onCloseRoute = _ref.onCloseRoute,\n    onOpenRoute = _ref.onOpenRoute,\n    onPageChangeCancel = _ref.onPageChangeCancel,\n    onPageChangeConfirm = _ref.onPageChangeConfirm,\n    onPageChangeStart = _ref.onPageChangeStart,\n    onGestureCancel = _ref.onGestureCancel,\n    onGestureEnd = _ref.onGestureEnd,\n    onGestureStart = _ref.onGestureStart,\n    onTransitionEnd = _ref.onTransitionEnd,\n    onTransitionStart = _ref.onTransitionStart,\n    renderHeader = _ref.renderHeader,\n    renderScene = _ref.renderScene,\n    safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n    safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n    safeAreaInsetRight = _ref.safeAreaInsetRight,\n    safeAreaInsetTop = _ref.safeAreaInsetTop,\n    scene = _ref.scene,\n    transitionSpec = _ref.transitionSpec;\n  var handleOpen = function handleOpen() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n  var handleClose = function handleClose() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.route;\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: route\n    });\n  };\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.route;\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: route\n    });\n  };\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.route;\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: route\n    });\n  };\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n      gesture = _ref2.gesture;\n    var route = scene.route;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var _React$useState = React.useState('box-none'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    pointerEvents = _React$useState2[0],\n    setPointerEvents = _React$useState2[1];\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["React","useTheme","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","addListener","value","removeListener","isCurrentHeaderShown","previousScene","current","marginTop","backgroundColor","background","overflow","undefined","StyleSheet","absoluteFill","styles","container","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,SAAgBC,QAAhB,QAAgC,0BAAhC;AAEA,OAAOC,IAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,oBAAP;AAgEA,IAAMC,OAAO,GAAG,GAAhB;AAEA,SAASC,aAAT,OA4CU;EAAA,IA3CRC,MADqB,QACrBA,MADqB;IAErBC,WAFqB,QAErBA,WAFqB;IAGrBC,kBAHqB,QAGrBA,kBAHqB;IAIrBC,iBAJqB,QAIrBA,iBAJqB;IAKrBC,SALqB,QAKrBA,SALqB;IAMrBC,qBANqB,QAMrBA,qBANqB;IAOrBC,OAPqB,QAOrBA,OAPqB;IAQrBC,OARqB,QAQrBA,OARqB;IASrBC,OATqB,QASrBA,OATqB;IAUrBC,gBAVqB,QAUrBA,gBAVqB;IAWrBC,cAXqB,QAWrBA,cAXqB;IAYrBC,uBAZqB,QAYrBA,uBAZqB;IAarBC,qBAbqB,QAarBA,qBAbqB;IAcrBC,gBAdqB,QAcrBA,gBAdqB;IAerBC,eAfqB,QAerBA,eAfqB;IAgBrBC,IAhBqB,QAgBrBA,IAhBqB;IAiBrBC,UAjBqB,QAiBrBA,UAjBqB;IAkBrBC,WAlBqB,QAkBrBA,WAlBqB;IAmBrBC,uBAnBqB,QAmBrBA,uBAnBqB;IAoBrBC,iBApBqB,QAoBrBA,iBApBqB;IAqBrBC,YArBqB,QAqBrBA,YArBqB;IAsBrBC,oBAtBqB,QAsBrBA,oBAtBqB;IAuBrBC,mBAvBqB,QAuBrBA,mBAvBqB;IAwBrBC,KAxBqB,QAwBrBA,KAxBqB;IAyBrBC,MAzBqB,QAyBrBA,MAzBqB;IA0BrBC,YA1BqB,QA0BrBA,YA1BqB;IA2BrBC,WA3BqB,QA2BrBA,WA3BqB;IA4BrBC,kBA5BqB,QA4BrBA,kBA5BqB;IA6BrBC,mBA7BqB,QA6BrBA,mBA7BqB;IA8BrBC,iBA9BqB,QA8BrBA,iBA9BqB;IA+BrBC,eA/BqB,QA+BrBA,eA/BqB;IAgCrBC,YAhCqB,QAgCrBA,YAhCqB;IAiCrBC,cAjCqB,QAiCrBA,cAjCqB;IAkCrBC,eAlCqB,QAkCrBA,eAlCqB;IAmCrBC,iBAnCqB,QAmCrBA,iBAnCqB;IAoCrBC,YApCqB,QAoCrBA,YApCqB;IAqCrBC,WArCqB,QAqCrBA,WArCqB;IAsCrBC,mBAtCqB,QAsCrBA,mBAtCqB;IAuCrBC,iBAvCqB,QAuCrBA,iBAvCqB;IAwCrBC,kBAxCqB,QAwCrBA,kBAxCqB;IAyCrBC,gBAzCqB,QAyCrBA,gBAzCqB;IA0CrBC,KA1CqB,QA0CrBA,KA1CqB;IA2CrBC,cAAAA,QAAAA,cAAAA;EAEA,IAAMC,UAAU,GAAG,SAAbA,UAAU,GAAS;IACvB,IAAQC,KAAAA,GAAUH,KAAlB,CAAQG,KAAAA;IAERX,eAAe,KAAA,IAAfA,IAAAA,eAAe,KAAA,KAAA,CAAfA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAG;MAAEW,KAAAA,EAAAA;IAAF,CAAH,EAAc,KAAd,CAAfX;IACAP,WAAW,CAAC;MAAEkB,KAAAA,EAAAA;IAAF,CAAD,CAAXlB;EACD,CALD;EAOA,IAAMmB,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxB,IAAQD,KAAAA,GAAUH,KAAlB,CAAQG,KAAAA;IAERX,eAAe,KAAA,IAAfA,IAAAA,eAAe,KAAA,KAAA,CAAfA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAG;MAAEW,KAAAA,EAAAA;IAAF,CAAH,EAAc,IAAd,CAAfX;IACAR,YAAY,CAAC;MAAEmB,KAAAA,EAAAA;IAAF,CAAD,CAAZnB;EACD,CALD;EAOA,IAAMqB,kBAAkB,GAAG,SAArBA,kBAAkB,GAAS;IAC/B,IAAQF,KAAAA,GAAUH,KAAlB,CAAQG,KAAAA;IAERf,iBAAiB,KAAA,IAAjBA,IAAAA,iBAAiB,KAAA,KAAA,CAAjBA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,EAAA;IACjBG,cAAc,KAAA,IAAdA,IAAAA,cAAc,KAAA,KAAA,CAAdA,GAAAA,KAAAA,CAAAA,GAAAA,cAAc,CAAG;MAAEY,KAAAA,EAAAA;IAAF,CAAH,CAAdZ;EACD,CALD;EAOA,IAAMe,qBAAqB,GAAG,SAAxBA,qBAAqB,GAAS;IAClC,IAAQH,KAAAA,GAAUH,KAAlB,CAAQG,KAAAA;IAERjB,kBAAkB,KAAA,IAAlBA,IAAAA,kBAAkB,KAAA,KAAA,CAAlBA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAkB,EAAA;IAClBG,eAAe,KAAA,IAAfA,IAAAA,eAAe,KAAA,KAAA,CAAfA,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAG;MAAEc,KAAAA,EAAAA;IAAF,CAAH,CAAfd;EACD,CALD;EAOA,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;IAC7B,IAAQJ,KAAAA,GAAUH,KAAlB,CAAQG,KAAAA;IAERb,YAAY,KAAA,IAAZA,IAAAA,YAAY,KAAA,KAAA,CAAZA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAG;MAAEa,KAAAA,EAAAA;IAAF,CAAH,CAAZb;EACD,CAJD;EAMA,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAgB,QAMhB;IAAA,IALJ3C,OADwB,SACxBA,OADwB;MAExBC,OAAAA,SAAAA,OAAAA;IAKA,IAAQqC,KAAAA,GAAUH,KAAlB,CAAQG,KAAAA;IAER,IAAI,CAACrC,OAAL,EAAc;MACZqB,mBAAmB,KAAA,IAAnBA,IAAAA,mBAAmB,KAAA,KAAA,CAAnBA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAmB,CAAG,IAAH,CAAnBA;IACD,CAFD,MAEO,IAAI5B,MAAM,IAAIM,OAAd,EAAuB;MAC5BsB,mBAAmB,KAAA,IAAnBA,IAAAA,mBAAmB,KAAA,KAAA,CAAnBA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAmB,CAAG,KAAH,CAAnBA;IACD,CAFM,MAEA;MACLD,kBAAkB,KAAA,IAAlBA,IAAAA,kBAAkB,KAAA,KAAA,CAAlBA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAkB,EAAA;IACnB;IAEDO,iBAAiB,KAAA,IAAjBA,IAAAA,iBAAiB,KAAA,KAAA,CAAjBA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,CAAG;MAAEU,KAAAA,EAAAA;IAAF,CAAH,EAActC,OAAd,CAAjB4B;EACD,CAlBD;EAoBA,IAAMgB,MAAM,GAAG;IACbC,GAAG,EAAEX,gBADQ;IAEbY,KAAK,EAAEb,kBAFM;IAGbc,MAAM,EAAEhB,mBAHK;IAIbiB,IAAI,EAAEhB;EAJO,CAAf;EAOA,gBAAmB7C,QAAQ,EAA3B;IAAQ8D,MAAAA,aAAAA,MAAAA;EAER,sBAA0C/D,KAAK,CAACkE,QAANlE,CACxC,UADwCA,CAA1C;IAAA;IAAOgE,aAAD;IAAgBC,gBAAhB;EAINjE,KAAK,CAACmE,SAANnE,CAAgB,YAAM;IAAA,IAAA,oBAAA,EAAA,qBAAA;;IAEpB,IAAMoE,QAAQ,GAAA,CAAA,oBAAA,GAAG,KAAK,CAACC,QAAN,CAAeC,IAAlB,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAG,oBAAA,CAAqBC,WAAxB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAG,qBAAA,CAAA,IAAA,CAAA,oBAAA,EACf,iBAAkC;MAAA,IAA/BC,KAAAA,SAAAA,KAAAA;MACDP,gBAAgB,CAACO,KAAK,IAAIlE,OAATkE,GAAmB,UAAnBA,GAAgC,MAAjC,CAAhBP;IACD,CAHc,CAAjB;IAMA,OAAO,YAAM;MACX,IAAIG,QAAJ,EAAc;QAAA,IAAA,qBAAA,EAAA,qBAAA;;QAEZ,CAAA,qBAAA,GAAA,KAAK,CAACC,QAAN,CAAeC,IAAf,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAA,qBAAA,CAAqBG,cAArB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,qBAAA,EAAsCL,QAAtC,CAAA;MACD;IACF,CALD;EAMD,CAdDpE,EAcG,CAACgE,aAAD,EAAgBf,KAAK,CAACoB,QAANpB,CAAeqB,IAA/B,CAdHtE,CAAAA;EAgBA,IAAM0E,oBAAoB,GAAGlD,UAAU,KAAK,MAAfA,IAAyBC,WAAW,KAAK,KAAtE;EACA,IAAMkD,aAAa,GAAGtD,gBAAgB,CAAC;IAAE+B,KAAK,EAAEH,KAAK,CAACG;EAAf,CAAD,CAAtC;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IACE,KAAK,EAAErB,KADT;IAEE,gBAAgB,EAAEd,gBAFpB;IAGE,MAAM,EAAEe,MAHV;IAIE,MAAM,EAAE0B,MAJV;IAKE,OAAO,EAAE3C,OALX;IAME,OAAO,EAAEkC,KAAK,CAACoB,QAANpB,CAAe2B,OAN1B;IAOE,IAAI,EAAE3B,KAAK,CAACoB,QAANpB,CAAeqB,IAPvB;IAQE,OAAO,EAAExD,OARX;IASE,MAAM,EAAEqC,UATV;IAUE,OAAO,EAAEE,WAVX;IAWE,OAAO,EAAE5C,WAXX;IAYE,cAAc,EAAEC,kBAZlB;IAaE,aAAa,EAAEC,iBAbjB;IAcE,YAAY,EAAE8C,gBAdhB;IAeE,cAAc,EAAEH,kBAflB;IAgBE,iBAAiB,EAAEC,qBAhBrB;IAiBE,YAAY,EAAEC,gBAjBhB;IAkBE,cAAc,EAAEtC,cAlBlB;IAmBE,uBAAuB,EAAEC,uBAnB3B;IAoBE,qBAAqB,EAAEC,qBApBzB;IAqBE,cAAc,EAAE8B,cArBlB;IAsBE,iBAAiB,EAAErC,qBAtBrB;IAuBE,2BAA2B,EAAE,CAACG,OAvBhC;IAwBE,yBAAyB,EAAEA,OAAO,GAAG,MAAH,GAAY,qBAxBhD;IAyBE,aAAa,EAAER,MAAM,GAAG,UAAH,GAAgBwD,aAzBvC;IA0BE,mBAAmB,EAAExC,UAAU,KAAK,QAAfA,IAA2BD,IAAI,KAAK,MA1B3D;IA2BE,cAAc,EAAEI,iBAAiB,GAAG;MAAEkD,SAAS,EAAEjD;IAAb,CAAH,GAAiC,IA3BpE;IA4BE,YAAY,EAAE,CAAC;MAAEkD,eAAe,EAAEf,MAAM,CAACgB;IAA1B,CAAD,EAAyCnE,SAAzC,CA5BhB;IA6BE,KAAK,EAAE,CACL;MAGEoE,QAAQ,EAAExE,MAAM,GAAGyE,SAAH,GAAe;IAHjC,CADK,EAMLC,UAAU,CAACC,YANN;EA7BT,CAAA,EAsCE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IAAM,KAAK,EAAEC,MAAM,CAACC;EAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IAAM,KAAK,EAAED,MAAM,CAACnC;EAApB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAsB,QAAtB,EAAA;IAA+B,KAAK,EAAE0B;EAAtC,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAoB,QAApB,EAAA;IACE,KAAK,EAAE7C,mBAAmB,IAAI4C;EADhC,CAAA,EAGE,KAAA,CAAA,aAAA,CAAC,mBAAD,CAAqB,QAArB,EAAA;IAA8B,KAAK,EAAE9C;EAArC,CAAA,EACGgB,WAAW,CAAC;IAAEQ,KAAK,EAAEH,KAAK,CAACG;EAAf,CAAD,CADd,CAHF,CADF,CADF,CADF,EAYG,UAAU,KAAK,QAAf,GACGT,YAAY,CAAC;IACXpB,IAAI,EAAE,QADK;IAEXS,MAFW,EAEXA,MAFW;IAGX0B,MAHW,EAGXA,MAHW;IAIX4B,MAAM,EAAE,CAACX,aAAD,EAAgB1B,KAAhB,CAJG;IAKX5B,gBALW,EAKXA,gBALW;IAMXC,eANW,EAMXA,eANW;IAOXL,gBAPW,EAOXA,gBAPW;IAQXsE,iBAAiB,EAAE7D,uBARR;IASX8D,qBAAqB,EAAE3D;EATZ,CAAD,CADf,GAYG,IAxBN,CAtCF,CADF;AAmED;AAED,eAAe7B,KAAK,CAACyF,IAANzF,CAAWO,aAAXP,CAAf;AAEA,IAAMoF,MAAM,GAAG,UAAU,CAACM,MAAX,CAAkB;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CADG;IAETC,aAAa,EAAE;EAFN,CADoB;EAK/B3C,KAAK,EAAE;IACL0C,IAAI,EAAE;EADD;AALwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}