{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableItem from \"./TouchableItem\";\nimport Animated from 'react-native-reanimated';\nimport memoize from \"./memoize\";\n\nvar AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\nvar TabBarItem = function (_React$Component) {\n  _inherits(TabBarItem, _React$Component);\n  var _super = _createSuper(TabBarItem);\n  function TabBarItem() {\n    var _this;\n    _classCallCheck(this, TabBarItem);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"getActiveOpacity\", memoize(function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return AnimatedInterpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 1 : 0;\n          })\n        });\n      } else {\n        return 1;\n      }\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"getInactiveOpacity\", memoize(function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return AnimatedInterpolate(position, {\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 0 : 1;\n          })\n        });\n      } else {\n        return 0;\n      }\n    }));\n    return _this;\n  }\n  _createClass(TabBarItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        route = _this$props.route,\n        position = _this$props.position,\n        navigationState = _this$props.navigationState,\n        renderLabelPassed = _this$props.renderLabel,\n        renderIcon = _this$props.renderIcon,\n        renderBadge = _this$props.renderBadge,\n        getLabelText = _this$props.getLabelText,\n        getTestID = _this$props.getTestID,\n        getAccessibilityLabel = _this$props.getAccessibilityLabel,\n        getAccessible = _this$props.getAccessible,\n        _this$props$activeCol = _this$props.activeColor,\n        activeColor = _this$props$activeCol === void 0 ? DEFAULT_ACTIVE_COLOR : _this$props$activeCol,\n        _this$props$inactiveC = _this$props.inactiveColor,\n        inactiveColor = _this$props$inactiveC === void 0 ? DEFAULT_INACTIVE_COLOR : _this$props$inactiveC,\n        pressColor = _this$props.pressColor,\n        pressOpacity = _this$props.pressOpacity,\n        labelStyle = _this$props.labelStyle,\n        style = _this$props.style,\n        onLayout = _this$props.onLayout,\n        onPress = _this$props.onPress,\n        onLongPress = _this$props.onLongPress;\n      var tabIndex = navigationState.routes.indexOf(route);\n      var isFocused = navigationState.index === tabIndex;\n      var activeOpacity = this.getActiveOpacity(position, navigationState.routes, tabIndex);\n      var inactiveOpacity = this.getInactiveOpacity(position, navigationState.routes, tabIndex);\n      var icon = null;\n      var label = null;\n      if (renderIcon) {\n        var activeIcon = renderIcon({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveIcon = renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n        if (inactiveIcon != null && activeIcon != null) {\n          icon = React.createElement(View, {\n            style: styles.icon\n          }, React.createElement(Animated.View, {\n            style: {\n              opacity: inactiveOpacity\n            }\n          }, inactiveIcon), React.createElement(Animated.View, {\n            style: [StyleSheet.absoluteFill, {\n              opacity: activeOpacity\n            }]\n          }, activeIcon));\n        }\n      }\n      var renderLabel = renderLabelPassed !== undefined ? renderLabelPassed : function (_ref) {\n        var route = _ref.route,\n          color = _ref.color;\n        var labelText = getLabelText({\n          route: route\n        });\n        if (typeof labelText === 'string') {\n          return React.createElement(Animated.Text, {\n            style: [styles.label, icon ? {\n              marginTop: 0\n            } : null, {\n              color: color\n            }, labelStyle]\n          }, labelText);\n        }\n        return labelText;\n      };\n      if (renderLabel) {\n        var activeLabel = renderLabel({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveLabel = renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n        label = React.createElement(View, null, React.createElement(Animated.View, {\n          style: {\n            opacity: inactiveOpacity\n          }\n        }, inactiveLabel), React.createElement(Animated.View, {\n          style: [StyleSheet.absoluteFill, {\n            opacity: activeOpacity\n          }]\n        }, activeLabel));\n      }\n      var tabStyle = StyleSheet.flatten(style);\n      var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n      var tabContainerStyle = isWidthSet ? null : {\n        flex: 1\n      };\n      var scene = {\n        route: route\n      };\n      var accessibilityLabel = getAccessibilityLabel(scene);\n      accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n      var badge = renderBadge ? renderBadge(scene) : null;\n      return React.createElement(TouchableItem, {\n        borderless: true,\n        testID: getTestID(scene),\n        accessible: getAccessible(scene),\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: isFocused ? ['button', 'selected'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"tab\",\n        accessibilityState: {\n          selected: isFocused\n        },\n\n        accessibilityStates: isFocused ? ['selected'] : [],\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        delayPressIn: 0,\n        onLayout: onLayout,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        style: tabContainerStyle\n      }, React.createElement(View, {\n        pointerEvents: \"none\",\n        style: [styles.item, tabStyle]\n      }, icon, label, badge != null ? React.createElement(View, {\n        style: styles.badge\n      }, badge) : null));\n    }\n  }]);\n  return TabBarItem;\n}(React.Component);\nexport { TabBarItem as default };\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["TabBarItem.tsx"],"names":["React","TouchableItem","Animated","memoize","AnimatedInterpolate","interpolateNode","interpolate","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","Component","position","routes","tabIndex","length","inputRange","map","_","i","outputRange","render","route","navigationState","renderLabel","renderLabelPassed","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColor","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","props","indexOf","isFocused","index","activeOpacity","getActiveOpacity","inactiveOpacity","getInactiveOpacity","icon","label","activeIcon","focused","color","inactiveIcon","styles","opacity","StyleSheet","absoluteFill","undefined","labelText","marginTop","activeLabel","inactiveLabel","tabStyle","flatten","isWidthSet","width","tabContainerStyle","flex","scene","accessibilityLabel","badge","selected","item","create","margin","backgroundColor","alignItems","justifyContent","padding","minHeight","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\nimport memoize from './memoize';\n\n// @ts-ignore\nconst AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport type Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = memoize(\n    (position: Animated.Node<number>, routes: Route[], tabIndex: number) => {\n      if (routes.length > 1) {\n        const inputRange = routes.map((_, i) => i);\n\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n        });\n      } else {\n        return 1;\n      }\n    }\n  );\n\n  private getInactiveOpacity = memoize((position, routes, tabIndex) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return AnimatedInterpolate(position, {\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  });\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    { color },\n                    labelStyle,\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        // @ts-ignore: this is to support older React Native versions\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}