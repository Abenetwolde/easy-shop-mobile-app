{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (initialRouteIndex !== index) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      break;\n  }\n  return history;\n};\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index: index,\n    history: history\n  });\n};\nexport default function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    _ref$backBehavior = _ref.backBehavior,\n    backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n        routeParamList = _ref4.routeParamList;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name;\n        }) || {\n          name: name,\n          key: \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(\n      function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n                var params;\n                if (action.type === 'NAVIGATE' && action.payload.merge === false) {\n                  params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n                } else {\n                  params = action.payload.params ? _objectSpread(_objectSpread({}, route.params), action.payload.params) : route.params;\n                }\n                return params !== route.params ? _objectSpread(_objectSpread({}, route), {}, {\n                  params: params\n                }) : route;\n              }) : state.routes\n            }), index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            var previousKey = state.history[state.history.length - 2].key;\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n            if (_index === -1) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","find","r","Math","min","max","length","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","merge","previousKey","slice","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior = 'initialRoute' | 'order' | 'history' | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (initialRouteIndex !== index) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<\n          TabNavigationState<ParamListBase>\n        >).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) => {\n                      if (i !== index) {\n                        return route;\n                      }\n\n                      let params;\n\n                      if (\n                        action.type === 'NAVIGATE' &&\n                        action.payload.merge === false\n                      ) {\n                        params =\n                          routeParamList[route.name] !== undefined\n                            ? {\n                                ...routeParamList[route.name],\n                                ...action.payload.params,\n                              }\n                            : action.payload.params;\n                      } else {\n                        params = action.payload.params\n                          ? {\n                              ...route.params,\n                              ...action.payload.params,\n                            }\n                          : route.params;\n                      }\n\n                      return params !== route.params\n                        ? { ...route, params }\n                        : route;\n                    })\n                  : state.routes,\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}