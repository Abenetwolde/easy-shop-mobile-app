{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Animated from 'react-native-reanimated';\nvar event = Animated.event,\n  divide = Animated.divide,\n  onChange = Animated.onChange,\n  cond = Animated.cond,\n  eq = Animated.eq,\n  round = Animated.round,\n  call = Animated.call,\n  Value = Animated.Value;\nvar ScrollPager = function (_React$Component) {\n  _inherits(ScrollPager, _React$Component);\n  var _super = _createSuper(ScrollPager);\n  function ScrollPager() {\n    var _this;\n    _classCallCheck(this, ScrollPager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"initialOffset\", {\n      x: _this.props.navigationState.index * _this.props.layout.width,\n      y: 0\n    });\n    _defineProperty(_assertThisInitialized(_this), \"wasTouched\", false);\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", null);\n    _defineProperty(_assertThisInitialized(_this), \"scrollViewRef\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"jumpTo\", function (key) {\n      _this.wasTouched = false;\n      var _this$props = _this.props,\n        navigationState = _this$props.navigationState,\n        keyboardDismissMode = _this$props.keyboardDismissMode,\n        onIndexChange = _this$props.onIndexChange;\n      var index = navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      if (navigationState.index === index) {\n        _this.scrollTo(index * _this.props.layout.width);\n      } else {\n        onIndexChange(index);\n        if (keyboardDismissMode === 'auto') {\n          Keyboard.dismiss();\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"scrollTo\", function (x) {\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (_this.scrollViewRef.current) {\n        var _this$scrollViewRef$c, _this$scrollViewRef$c2;\n\n        var scrollView =\n        typeof ((_this$scrollViewRef$c = _this.scrollViewRef.current) === null || _this$scrollViewRef$c === void 0 ? void 0 : _this$scrollViewRef$c.scrollTo) === 'function' ? _this.scrollViewRef.current : (_this$scrollViewRef$c2 = _this.scrollViewRef.current) === null || _this$scrollViewRef$c2 === void 0 ? void 0 : _this$scrollViewRef$c2.getNode();\n\n        scrollView === null || scrollView === void 0 ? void 0 : scrollView.scrollTo({\n          x: x,\n          animated: animated\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"enterListeners\", []);\n    _defineProperty(_assertThisInitialized(_this), \"addListener\", function (type, listener) {\n      switch (type) {\n        case 'enter':\n          _this.enterListeners.push(listener);\n          break;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"removeListener\", function (type, listener) {\n      switch (type) {\n        case 'enter':\n          {\n            var index = _this.enterListeners.indexOf(listener);\n            if (index > -1) {\n              _this.enterListeners.splice(index, 1);\n            }\n            break;\n          }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Animated.Value(_this.props.navigationState.index * _this.props.layout.width));\n    _defineProperty(_assertThisInitialized(_this), \"onScroll\", event([{\n      nativeEvent: {\n        contentOffset: {\n          x: _this.position\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"layoutWidthNode\", new Value(_this.props.layout.width));\n    _defineProperty(_assertThisInitialized(_this), \"relativePosition\", divide(_this.position, _this.layoutWidthNode));\n    return _this;\n  }\n  _createClass(ScrollPager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.layout.width) {\n        this.scrollTo(this.props.navigationState.index * this.props.layout.width, false);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var offset = this.props.navigationState.index * this.props.layout.width;\n      if (prevProps.navigationState.routes.length !== this.props.navigationState.routes.length || prevProps.layout.width !== this.props.layout.width) {\n        this.scrollTo(offset, false);\n      } else if (prevProps.navigationState.index !== this.props.navigationState.index) {\n        this.scrollTo(offset);\n      }\n      if (prevProps.layout.width !== this.props.layout.width) {\n        this.layoutWidthNode.setValue(this.props.layout.width);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        layout = _this$props2.layout,\n        onSwipeStart = _this$props2.onSwipeStart,\n        onSwipeEnd = _this$props2.onSwipeEnd,\n        overscroll = _this$props2.overscroll,\n        onIndexChange = _this$props2.onIndexChange,\n        navigationState = _this$props2.navigationState;\n      var handleSwipeStart = function handleSwipeStart() {\n        _this2.wasTouched = false;\n        onSwipeStart === null || onSwipeStart === void 0 ? void 0 : onSwipeStart();\n        _this2.interactionHandle = InteractionManager.createInteractionHandle();\n      };\n      var handleSwipeEnd = function handleSwipeEnd() {\n        _this2.wasTouched = true;\n        onSwipeEnd === null || onSwipeEnd === void 0 ? void 0 : onSwipeEnd();\n        if (_this2.interactionHandle !== null) {\n          InteractionManager.clearInteractionHandle(_this2.interactionHandle);\n        }\n      };\n      return children({\n        position: this.relativePosition,\n        addListener: this.addListener,\n        removeListener: this.removeListener,\n        jumpTo: this.jumpTo,\n        render: function render(children) {\n          return React.createElement(Animated.ScrollView, {\n            pagingEnabled: true,\n            directionalLockEnabled: true,\n            keyboardDismissMode: \"on-drag\",\n            keyboardShouldPersistTaps: \"always\",\n            overScrollMode: \"never\",\n            scrollToOverflowEnabled: true,\n            scrollEnabled: _this2.props.swipeEnabled,\n            automaticallyAdjustContentInsets: false,\n            bounces: overscroll,\n            scrollsToTop: false,\n            showsHorizontalScrollIndicator: false,\n            scrollEventThrottle: 1,\n            onScroll: _this2.onScroll,\n            onScrollBeginDrag: handleSwipeStart,\n            onScrollEndDrag: handleSwipeEnd,\n            onMomentumScrollEnd: _this2.onScroll,\n            contentOffset: _this2.initialOffset,\n            style: styles.container,\n            contentContainerStyle: layout.width ? {\n              flexDirection: 'row',\n              width: layout.width * navigationState.routes.length,\n              flex: 1\n            } : null,\n            ref: _this2.scrollViewRef\n          }, children, React.createElement(Animated.Code, {\n            exec: onChange(_this2.relativePosition, cond(eq(round(_this2.relativePosition), _this2.relativePosition), [call([_this2.relativePosition], function (_ref) {\n              var _ref2 = _slicedToArray(_ref, 1),\n                relativePosition = _ref2[0];\n              if (_this2.wasTouched) {\n                onIndexChange(relativePosition);\n                _this2.wasTouched = false;\n              }\n            })]))\n          }));\n        }\n      });\n    }\n  }]);\n  return ScrollPager;\n}(React.Component);\nexport { ScrollPager as default };\n_defineProperty(ScrollPager, \"defaultProps\", {\n  bounces: true\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["ScrollPager.tsx"],"names":["React","Animated","event","divide","onChange","cond","eq","round","call","Value","ScrollPager","Component","bounces","componentDidMount","props","layout","width","scrollTo","navigationState","index","componentDidUpdate","prevProps","offset","routes","length","layoutWidthNode","setValue","componentWillUnmount","interactionHandle","InteractionManager","clearInteractionHandle","x","y","createRef","key","wasTouched","keyboardDismissMode","onIndexChange","findIndex","route","Keyboard","dismiss","animated","scrollViewRef","current","scrollView","getNode","type","listener","enterListeners","push","indexOf","splice","nativeEvent","contentOffset","position","render","children","onSwipeStart","onSwipeEnd","overscroll","handleSwipeStart","createInteractionHandle","handleSwipeEnd","relativePosition","addListener","removeListener","jumpTo","swipeEnabled","onScroll","initialOffset","styles","container","flexDirection","flex","create"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Keyboard, InteractionManager } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { Props } from './Pager';\nimport { Route, Listener } from './types';\n\nconst { event, divide, onChange, cond, eq, round, call, Value } = Animated;\n\ntype State = {\n  initialOffset: { x: number; y: number };\n};\n\nexport default class ScrollPager<T extends Route> extends React.Component<\n  Props<T> & { overscroll?: boolean },\n  State\n> {\n  static defaultProps = {\n    bounces: true,\n  };\n\n  componentDidMount() {\n    if (this.props.layout.width) {\n      this.scrollTo(\n        this.props.navigationState.index * this.props.layout.width,\n        false\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const offset = this.props.navigationState.index * this.props.layout.width;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        this.props.navigationState.routes.length ||\n      prevProps.layout.width !== this.props.layout.width\n    ) {\n      this.scrollTo(offset, false);\n    } else if (\n      prevProps.navigationState.index !== this.props.navigationState.index\n    ) {\n      this.scrollTo(offset);\n    }\n\n    if (prevProps.layout.width !== this.props.layout.width) {\n      this.layoutWidthNode.setValue(this.props.layout.width);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  private initialOffset = {\n    x: this.props.navigationState.index * this.props.layout.width,\n    y: 0,\n  };\n\n  private wasTouched: boolean = false;\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private jumpTo = (key: string) => {\n    this.wasTouched = false;\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    if (navigationState.index === index) {\n      this.scrollTo(index * this.props.layout.width);\n    } else {\n      onIndexChange(index);\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private scrollTo = (x: number, animated = true) => {\n    if (this.scrollViewRef.current) {\n      // getNode() is not necessary in newer versions of React Native\n      const scrollView =\n        // @ts-ignore\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\n          ? this.scrollViewRef.current\n          : this.scrollViewRef.current?.getNode();\n\n      // @ts-ignore\n      scrollView?.scrollTo({\n        x,\n        animated: animated,\n      });\n    }\n  };\n\n  private enterListeners: Listener[] = [];\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private position = new Animated.Value(\n    this.props.navigationState.index * this.props.layout.width\n  );\n\n  private onScroll = event([\n    {\n      nativeEvent: {\n        contentOffset: {\n          x: this.position,\n        },\n      },\n    },\n  ]);\n\n  private layoutWidthNode = new Value(this.props.layout.width);\n\n  private relativePosition = divide(this.position, this.layoutWidthNode);\n\n  render() {\n    const {\n      children,\n      layout,\n      onSwipeStart,\n      onSwipeEnd,\n      overscroll,\n      onIndexChange,\n      navigationState,\n    } = this.props;\n\n    const handleSwipeStart = () => {\n      this.wasTouched = false;\n      onSwipeStart?.();\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    };\n\n    const handleSwipeEnd = () => {\n      this.wasTouched = true;\n      onSwipeEnd?.();\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    };\n\n    return children({\n      position: this.relativePosition,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <Animated.ScrollView\n          pagingEnabled\n          directionalLockEnabled\n          keyboardDismissMode=\"on-drag\"\n          keyboardShouldPersistTaps=\"always\"\n          overScrollMode=\"never\"\n          scrollToOverflowEnabled\n          scrollEnabled={this.props.swipeEnabled}\n          automaticallyAdjustContentInsets={false}\n          bounces={overscroll}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          scrollEventThrottle={1}\n          onScroll={this.onScroll}\n          onScrollBeginDrag={handleSwipeStart}\n          onScrollEndDrag={handleSwipeEnd}\n          onMomentumScrollEnd={this.onScroll}\n          contentOffset={this.initialOffset}\n          style={styles.container}\n          contentContainerStyle={\n            layout.width\n              ? {\n                  flexDirection: 'row',\n                  width: layout.width * navigationState.routes.length,\n                  flex: 1,\n                }\n              : null\n          }\n          ref={this.scrollViewRef}\n        >\n          {children}\n          <Animated.Code\n            exec={onChange(\n              this.relativePosition,\n              cond(eq(round(this.relativePosition), this.relativePosition), [\n                call([this.relativePosition], ([relativePosition]) => {\n                  if (this.wasTouched) {\n                    onIndexChange(relativePosition);\n                    this.wasTouched = false;\n                  }\n                }),\n              ])\n            )}\n          />\n        </Animated.ScrollView>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}