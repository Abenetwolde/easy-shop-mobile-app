{"ast":null,"code":"import useCode from \"../derived/useCode\";\nimport AnimatedNode from \"./AnimatedNode\";\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    var error = !children ? \"Got \\\"\".concat(typeof children, \"\\\" type passed to children\") : \"Got \\\"\".concat(typeof exec, \"\\\" type passed to exec\");\n    throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \".concat(error));\n  }\n}\nfunction Code(_ref) {\n  var exec = _ref.exec,\n    children = _ref.children,\n    dependencies = _ref.dependencies;\n  var nodes = children || exec;\n  var code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = function code() {\n      return nodes;\n    };\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n  assertNodesNotNull(code, children, exec);\n  useCode(code, dependencies);\n  return null;\n}\nexport default Code;","map":{"version":3,"sources":["AnimatedCode.js"],"names":["useCode","AnimatedNode","assertNodesNotNull","code","children","exec","error","Error","Code","dependencies","nodes"],"mappings":"AAAA,OAAOA,OAAP;AACA,OAAOC,YAAP;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;EAChD,IAAI,CAACF,IAAL,EAAW;IACT,IAAMG,KAAK,GAAG,CAACF,QAAD,GAAA,QAAA,CAAA,MAAA,CACF,OAAOA,QADL,EAAA,4BAAA,CAAA,GAAA,QAAA,CAAA,MAAA,CAEF,OAAOC,IAFL,EAAA,wBAAA,CAAd;IAIA,MAAM,IAAIE,KAAJ,CAAA,yHAAA,CAAA,MAAA,CACsHD,KADtH,CAAA,CAAN;EAGD;AACF;AAED,SAASE,IAAT,OAAgD;EAAA,IAAhCH,IAAF,QAAEA,IAAF;IAAQD,QAAR,QAAQA,QAAR;IAAkBK,YAAAA,QAAAA,YAAAA;EAC9B,IAAMC,KAAK,GAAGN,QAAQ,IAAIC,IAA1B;EAEA,IAAIF,IAAI,GAAG,IAAX;EACA,IAAIO,KAAK,YAAYT,YAArB,EAAmC;IACjCE,IAAI,GAAG;MAAA,OAAMO,KAAbP;IAAAA;EACD,CAFD,MAEO,IAAI,OAAOO,KAAP,KAAiB,UAArB,EAAiC;IACtCP,IAAI,GAAGO,KAAPP;EACD;EAEDD,kBAAkB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,CAAlBH;EAEAF,OAAO,CAACG,IAAD,EAAOM,YAAP,CAAPT;EACA,OAAO,IAAP;AACD;AAED,eAAeQ,IAAf","sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}