{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TabBarIcon from \"./TabBarIcon\";\nexport default function BottomTabBarItem(_ref) {\n  var focused = _ref.focused,\n    route = _ref.route,\n    label = _ref.label,\n    icon = _ref.icon,\n    badge = _ref.badge,\n    badgeStyle = _ref.badgeStyle,\n    to = _ref.to,\n    _ref$button = _ref.button,\n    button = _ref$button === void 0 ? function (_ref2) {\n      var children = _ref2.children,\n        style = _ref2.style,\n        _onPress = _ref2.onPress,\n        to = _ref2.to,\n        accessibilityRole = _ref2.accessibilityRole,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n      if (Platform.OS === 'web' && to) {\n        return React.createElement(Link, _extends({}, rest, {\n          to: to,\n          style: [styles.button, style],\n          onPress: function onPress(e) {\n            if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n            e.button == null || e.button === 0)) {\n              e.preventDefault();\n              _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n            }\n          }\n        }), children);\n      } else {\n        return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n          accessibilityRole: accessibilityRole,\n          onPress: _onPress\n        }), React.createElement(View, {\n          style: style\n        }, children));\n      }\n    } : _ref$button,\n    accessibilityLabel = _ref.accessibilityLabel,\n    testID = _ref.testID,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    horizontal = _ref.horizontal,\n    customActiveTintColor = _ref.activeTintColor,\n    customInactiveTintColor = _ref.inactiveTintColor,\n    _ref$activeBackground = _ref.activeBackgroundColor,\n    activeBackgroundColor = _ref$activeBackground === void 0 ? 'transparent' : _ref$activeBackground,\n    _ref$inactiveBackgrou = _ref.inactiveBackgroundColor,\n    inactiveBackgroundColor = _ref$inactiveBackgrou === void 0 ? 'transparent' : _ref$inactiveBackgrou,\n    _ref$showLabel = _ref.showLabel,\n    showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,\n    allowFontScaling = _ref.allowFontScaling,\n    labelStyle = _ref.labelStyle,\n    iconStyle = _ref.iconStyle,\n    style = _ref.style;\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  var inactiveTintColor = customInactiveTintColor === undefined ? Color(colors.text).mix(Color(colors.card), 0.5).hex() : customInactiveTintColor;\n  var renderLabel = function renderLabel(_ref3) {\n    var focused = _ref3.focused;\n    if (showLabel === false) {\n      return null;\n    }\n    var color = focused ? activeTintColor : inactiveTintColor;\n    if (typeof label === 'string') {\n      return React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling\n      }, label);\n    }\n    return label({\n      focused: focused,\n      color: color,\n      position: horizontal ? 'beside-icon' : 'below-icon'\n    });\n  };\n  var renderIcon = function renderIcon(_ref4) {\n    var focused = _ref4.focused;\n    if (icon === undefined) {\n      return null;\n    }\n    var activeOpacity = focused ? 1 : 0;\n    var inactiveOpacity = focused ? 0 : 1;\n    return React.createElement(TabBarIcon, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      badgeStyle: badgeStyle,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle\n    });\n  };\n  var scene = {\n    route: route,\n    focused: focused\n  };\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to: to,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor: backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: React.createElement(React.Fragment, null, renderIcon(scene), renderLabel(scene))\n  });\n}\nvar styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["BottomTabItem.tsx"],"names":["React","Link","useTheme","Color","TabBarIcon","BottomTabBarItem","focused","route","label","icon","badge","badgeStyle","to","button","children","style","onPress","accessibilityRole","rest","Platform","OS","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","accessibilityLabel","testID","onLongPress","horizontal","activeTintColor","customActiveTintColor","inactiveTintColor","customInactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","labelBeside","labelBeneath","position","renderIcon","activeOpacity","inactiveOpacity","scene","backgroundColor","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","create","flex","alignItems","justifyContent","flexDirection","textAlign","fontSize","marginLeft","marginTop","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <TouchableWithoutFeedback\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n        >\n          <View style={style}>{children}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}