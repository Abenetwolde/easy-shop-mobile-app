{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\n\nexport var SUPPRESS_STATE_ACCESS_WARNING = {\n  value: false\n};\n\nexport default function useRouteCache(routes) {\n  var cache = React.useMemo(function () {\n    return {\n      current: new Map()\n    };\n  }, []);\n  if (process.env.NODE_ENV === 'production') {\n    return routes;\n  }\n  cache.current = routes.reduce(function (acc, route) {\n    var previous = cache.current.get(route);\n    if (previous) {\n      acc.set(route, previous);\n    } else {\n      var proxy = _objectSpread({}, route);\n      Object.defineProperty(proxy, 'state', {\n        get: function get() {\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\n            console.warn(\"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\");\n          }\n          return route.state;\n        }\n      });\n      acc.set(route, proxy);\n    }\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["React","SUPPRESS_STATE_ACCESS_WARNING","value","useRouteCache","routes","cache","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","proxy","Object","defineProperty","console","warn","state","Array","from","values"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAeA,OAAO,IAAMC,6BAA6B,GAAG;EAAEC,KAAK,EAAE;AAAT,CAAtC;;AAMP,eAAe,SAASC,aAAT,CACbC,MADa,EAEb;EAEA,IAAMC,KAAK,GAAG,KAAK,CAACC,OAAN,CAAc;IAAA,OAAO;MAAEC,OAAO,EAAE,IAAIC,GAAJ;IAAX,CAAP;EAAA,CAAd,EAA4D,EAA5D,CAAd;EAEA,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IAEzC,OAAOL,MAAP;EACD;EAEDC,KAAK,CAACE,OAANF,GAAgB,MAAM,CAACO,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN,EAAgB;IAC5C,IAAMC,QAAQ,GAAGV,KAAK,CAACE,OAANF,CAAcW,GAAdX,CAAkBS,KAAlBT,CAAjB;IAEA,IAAIU,QAAJ,EAAc;MAEZF,GAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeE,QAAfF,CAAAA;IACD,CAHD,MAGO;MACL,IAAMK,KAAK,qBAAQJ,KAAAA,CAAnB;MAEAK,MAAM,CAACC,cAAPD,CAAsBD,KAAtBC,EAA6B,OAA7BA,EAAsC;QACpCH,GAAG,iBAAG;UACJ,IAAI,CAACf,6BAA6B,CAACC,KAAnC,EAA0C;YACxCmB,OAAO,CAACC,IAARD,CACE,oSADFA,CAAAA;UAGD;UAED,OAAOP,KAAK,CAACS,KAAb;QACD;MATmC,CAAtCJ,CAAAA;MAYAN,GAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeK,KAAfL,CAAAA;IACD;IAED,OAAOA,GAAP;EACD,CAzBe,EAyBb,IAAIL,GAAJ,EAzBa,CAAhBH;EA2BA,OAAOmB,KAAK,CAACC,IAAND,CAAWnB,KAAK,CAACE,OAANF,CAAcqB,MAAdrB,EAAXmB,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport type {\n  ParamListBase,\n  NavigationState,\n  Route,\n} from '@react-navigation/routers';\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase, string>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const SUPPRESS_STATE_ACCESS_WARNING = { value: false };\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const proxy = { ...route };\n\n      Object.defineProperty(proxy, 'state', {\n        get() {\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\n            console.warn(\n              \"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\"\n            );\n          }\n\n          return route.state;\n        },\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]},"metadata":{},"sourceType":"module"}