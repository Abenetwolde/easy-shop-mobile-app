{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatePicker = undefined;\nvar _jsxFileName = 'src/basic/DatePicker.js';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _platform = require(\"../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _commonColor = require(\"../theme/variables/commonColor\");\n\nvar _Text = require(\"./Text\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DatePicker = exports.DatePicker = function (_React$Component) {\n  _inherits(DatePicker, _React$Component);\n\n  function DatePicker(props) {\n    _classCallCheck(this, DatePicker);\n\n    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));\n\n    _this.showDatePicker = function () {\n      if (_reactNative.Platform.OS === _commonColor.PLATFORM.ANDROID) {\n        _this.openAndroidDatePicker();\n      } else {\n        _this.setState({\n          modalVisible: true\n        });\n      }\n    };\n\n    _this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate: !props.placeHolderText && props.defaultDate ? props.defaultDate : undefined\n    };\n    return _this;\n  }\n\n  _createClass(DatePicker, [{\n    key: 'setDate',\n    value: function setDate(date) {\n      this.setState({\n        chosenDate: new Date(date)\n      });\n\n      if (this.props.onDateChange) {\n        this.props.onDateChange(date);\n      }\n    }\n  }, {\n    key: 'openAndroidDatePicker',\n    value: function openAndroidDatePicker() {\n      var newDate, action, year, month, day, selectedDate, code, message;\n      return _regeneratorRuntime.async(function openAndroidDatePicker$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_reactNative.DatePickerAndroid.open({\n                date: this.state.chosenDate ? this.state.chosenDate : this.state.defaultDate,\n                minDate: this.props.minimumDate,\n                maxDate: this.props.maximumDate,\n                mode: this.props.androidMode\n              }));\n\n            case 3:\n              newDate = _context.sent;\n              action = newDate.action, year = newDate.year, month = newDate.month, day = newDate.day;\n\n              if (action === 'dateSetAction') {\n                selectedDate = new Date(year, month, day);\n                this.setState({\n                  chosenDate: selectedDate\n                });\n                this.props.onDateChange(selectedDate);\n              }\n\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context['catch'](0);\n              code = _context.t0.code;\n              message = _context.t0.message;\n              console.warn('Cannot open date picker', message);\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 8]]);\n    }\n  }, {\n    key: 'formatChosenDate',\n    value: function formatChosenDate(date) {\n      if (this.props.formatChosenDate) {\n        return this.props.formatChosenDate(date);\n      }\n\n      return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          animationType = _props.animationType,\n          disabled = _props.disabled,\n          locale = _props.locale,\n          maximumDate = _props.maximumDate,\n          minimumDate = _props.minimumDate,\n          modalTransparent = _props.modalTransparent,\n          placeHolderText = _props.placeHolderText,\n          placeHolderTextStyle = _props.placeHolderTextStyle,\n          textStyle = _props.textStyle,\n          timeZoneOffsetInMinutes = _props.timeZoneOffsetInMinutes;\n      var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n      return _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        onPress: function onPress() {\n          return !disabled ? _this2.showDatePicker() : undefined;\n        },\n        style: [{\n          padding: variables.datePickerPadding,\n          color: variables.datePickerTextColor\n        }, this.state.chosenDate ? textStyle : placeHolderTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      }, this.state.chosenDate ? this.formatChosenDate(this.state.chosenDate) : placeHolderText || 'Select Date'), _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }, _react2.default.createElement(_reactNative.Modal, {\n        supportedOrientations: ['portrait', 'landscape'],\n        animationType: animationType,\n        transparent: modalTransparent,\n        visible: this.state.modalVisible,\n        onRequestClose: function onRequestClose() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        onPress: function onPress() {\n          return _this2.setState({\n            modalVisible: false\n          });\n        },\n        style: {\n          backgroundColor: variables.datePickerBg,\n          flex: variables.datePickerFlex\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }), _react2.default.createElement(_reactNative.DatePickerIOS, {\n        date: this.state.chosenDate ? this.state.chosenDate : this.state.defaultDate,\n        onDateChange: function onDateChange(date) {\n          return _this2.setDate(date);\n        },\n        minimumDate: minimumDate,\n        maximumDate: maximumDate,\n        mode: 'date',\n        locale: locale,\n        timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        }\n      })))));\n    }\n  }]);\n\n  return DatePicker;\n}(_react2.default.Component);\n\nDatePicker.defaultProps = {\n  disabled: false\n};","map":{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","React","Component","defaultProps","disabled","modalVisible","defaultDate","props","chosenDate","date","Platform","PLATFORM","newDate","DatePickerAndroid","minDate","maxDate","mode","action","year","month","day","selectedDate","code","message","console","animationType","locale","maximumDate","minimumDate","modalTransparent","placeHolderText","placeHolderTextStyle","textStyle","timeZoneOffsetInMinutes","variables","variable","padding","color","backgroundColor","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  View,\n  Platform,\n  DatePickerIOS,\n  DatePickerAndroid\n} from 'react-native';\n\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\n\nimport { Text } from './Text';\n\nexport class DatePicker extends React.Component {\n  static defaultProps = {\n    disabled: false\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate:\n        !props.placeHolderText && props.defaultDate\n          ? props.defaultDate\n          : undefined\n    };\n  }\n\n  setDate(date) {\n    this.setState({ chosenDate: new Date(date) });\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  showDatePicker = () => {\n    if (Platform.OS === PLATFORM.ANDROID) {\n      this.openAndroidDatePicker();\n    } else {\n      this.setState({ modalVisible: true });\n    }\n  };\n\n  async openAndroidDatePicker() {\n    try {\n      const newDate = await DatePickerAndroid.open({\n        date: this.state.chosenDate\n          ? this.state.chosenDate\n          : this.state.defaultDate,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.androidMode\n      });\n      const { action, year, month, day } = newDate;\n      if (action === 'dateSetAction') {\n        const selectedDate = new Date(year, month, day);\n        this.setState({ chosenDate: selectedDate });\n        this.props.onDateChange(selectedDate);\n      }\n    } catch ({ code, message }) {\n      console.warn('Cannot open date picker', message);\n    }\n  }\n\n  formatChosenDate(date) {\n    if (this.props.formatChosenDate) {\n      return this.props.formatChosenDate(date);\n    }\n    return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n  }\n\n  render() {\n    const {\n      animationType,\n      disabled,\n      locale,\n      maximumDate,\n      minimumDate,\n      modalTransparent,\n      placeHolderText,\n      placeHolderTextStyle,\n      textStyle,\n      timeZoneOffsetInMinutes\n    } = this.props;\n\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    return (\n      <View>\n        <View>\n          <Text\n            onPress={() => (!disabled ? this.showDatePicker() : undefined)}\n            style={[\n              {\n                padding: variables.datePickerPadding,\n                color: variables.datePickerTextColor\n              },\n              this.state.chosenDate ? textStyle : placeHolderTextStyle\n            ]}\n          >\n            {this.state.chosenDate\n              ? this.formatChosenDate(this.state.chosenDate)\n              : placeHolderText || 'Select Date'}\n          </Text>\n          <View>\n            <Modal\n              supportedOrientations={['portrait', 'landscape']}\n              animationType={animationType}\n              transparent={modalTransparent} // from api\n              visible={this.state.modalVisible}\n              onRequestClose={() => {}}\n            >\n              <Text\n                onPress={() => this.setState({ modalVisible: false })}\n                style={{\n                  backgroundColor: variables.datePickerBg,\n                  flex: variables.datePickerFlex\n                }}\n              />\n              <DatePickerIOS\n                date={\n                  this.state.chosenDate\n                    ? this.state.chosenDate\n                    : this.state.defaultDate\n                }\n                onDateChange={date => this.setDate(date)}\n                minimumDate={minimumDate}\n                maximumDate={maximumDate}\n                mode=\"date\"\n                locale={locale}\n                timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}\n              />\n            </Modal>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}