{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Animated from 'react-native-reanimated';\nimport TabBarItem from \"./TabBarItem\";\nimport TabBarIndicator from \"./TabBarIndicator\";\nimport memoize from \"./memoize\";\nvar scheduleInNextFrame = function scheduleInNextFrame(cb) {\n  var frame = requestAnimationFrame(function () {\n    frame = requestAnimationFrame(cb);\n  });\n  return function () {\n    return cancelAnimationFrame(frame);\n  };\n};\nvar TabBar = function (_React$Component) {\n  _inherits(TabBar, _React$Component);\n  var _super = _createSuper(TabBar);\n  function TabBar() {\n    var _this;\n    _classCallCheck(this, TabBar);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      layout: {\n        width: 0,\n        height: 0\n      },\n      tabWidths: {}\n    });\n    _defineProperty(_assertThisInitialized(_this), \"measuredTabWidths\", {});\n    _defineProperty(_assertThisInitialized(_this), \"scrollAmount\", new Animated.Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"scrollViewRef\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"cancelNextFrameCb\", undefined);\n    _defineProperty(_assertThisInitialized(_this), \"getFlattenedTabWidth\", function (style) {\n      var tabStyle = StyleSheet.flatten(style);\n      return tabStyle ? tabStyle.width : undefined;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getComputedTabWidth\", function (index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      if (flattenedWidth === 'auto') {\n        return tabWidths[routes[index].key] || 0;\n      }\n      switch (typeof flattenedWidth) {\n        case 'number':\n          return flattenedWidth;\n        case 'string':\n          if (flattenedWidth.endsWith('%')) {\n            var width = parseFloat(flattenedWidth);\n            if (Number.isFinite(width)) {\n              return layout.width * (width / 100);\n            }\n          }\n      }\n      if (scrollEnabled) {\n        return layout.width / 5 * 2;\n      }\n      return layout.width / routes.length;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getMemoizedTabWidthGettter\", memoize(function (layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      return function (i) {\n        return _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedWidth);\n      };\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"getMaxScrollDistance\", function (tabBarWidth, layoutWidth) {\n      return tabBarWidth - layoutWidth;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getTabBarWidth\", function (props, state) {\n      var layout = state.layout,\n        tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n        tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      return routes.reduce(function (acc, _, i) {\n        return acc + _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n      }, 0);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"normalizeScrollValue\", function (props, state, value) {\n      var layout = state.layout;\n      var tabBarWidth = _this.getTabBarWidth(props, state);\n      var maxDistance = _this.getMaxScrollDistance(tabBarWidth, layout.width);\n      var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n      if (Platform.OS === 'android' && I18nManager.isRTL) {\n        return maxDistance - scrollValue;\n      }\n      return scrollValue;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getScrollAmount\", function (props, state, index) {\n      var layout = state.layout,\n        tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n        tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      var centerDistance = Array.from({\n        length: index + 1\n      }).reduce(function (total, _, i) {\n        var tabWidth = _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      }, 0);\n      var scrollAmount = centerDistance - layout.width / 2;\n      return _this.normalizeScrollValue(props, state, scrollAmount);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetScroll\", function (index) {\n      if (_this.props.scrollEnabled) {\n        var _this$scrollViewRef$c, _this$scrollViewRef$c2;\n\n        var scrollView =\n        typeof ((_this$scrollViewRef$c = _this.scrollViewRef.current) === null || _this$scrollViewRef$c === void 0 ? void 0 : _this$scrollViewRef$c.scrollTo) === 'function' ? _this.scrollViewRef.current : (_this$scrollViewRef$c2 = _this.scrollViewRef.current) === null || _this$scrollViewRef$c2 === void 0 ? void 0 : _this$scrollViewRef$c2.getNode();\n\n        scrollView === null || scrollView === void 0 ? void 0 : scrollView.scrollTo({\n          x: _this.getScrollAmount(_this.props, _this.state, index),\n          animated: true\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _this$cancelNextFrame;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      (_this$cancelNextFrame = _this.cancelNextFrameCb) === null || _this$cancelNextFrame === void 0 ? void 0 : _this$cancelNextFrame.call(_assertThisInitialized(_this));\n      _this.cancelNextFrameCb = scheduleInNextFrame(function () {\n        return _this.setState({\n          layout: {\n            height: height,\n            width: width\n          }\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", memoize(function (scrollAmount, maxScrollDistance) {\n      return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.sub(maxScrollDistance, scrollAmount) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n    }));\n    return _this;\n  }\n  _createClass(TabBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var navigationState = this.props.navigationState;\n      var _this$state = this.state,\n        layout = _this$state.layout,\n        tabWidths = _this$state.tabWidths;\n      if (prevProps.navigationState.routes.length !== navigationState.routes.length || prevProps.navigationState.index !== navigationState.index || prevState.layout.width !== layout.width || prevState.tabWidths !== tabWidths) {\n        if (this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' && !(layout.width && navigationState.routes.every(function (r) {\n          return typeof tabWidths[r.key] === 'number';\n        }))) {\n          return;\n        }\n        this.resetScroll(navigationState.index);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$cancelNextFrame2;\n      (_this$cancelNextFrame2 = this.cancelNextFrameCb) === null || _this$cancelNextFrame2 === void 0 ? void 0 : _this$cancelNextFrame2.call(this);\n    }\n  }, {\n    key: \"render\",\n    value:\n\n    function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        position = _this$props.position,\n        navigationState = _this$props.navigationState,\n        jumpTo = _this$props.jumpTo,\n        scrollEnabled = _this$props.scrollEnabled,\n        bounces = _this$props.bounces,\n        getAccessibilityLabel = _this$props.getAccessibilityLabel,\n        getAccessible = _this$props.getAccessible,\n        getLabelText = _this$props.getLabelText,\n        getTestID = _this$props.getTestID,\n        renderBadge = _this$props.renderBadge,\n        renderIcon = _this$props.renderIcon,\n        renderLabel = _this$props.renderLabel,\n        renderTabBarItem = _this$props.renderTabBarItem,\n        activeColor = _this$props.activeColor,\n        inactiveColor = _this$props.inactiveColor,\n        pressColor = _this$props.pressColor,\n        pressOpacity = _this$props.pressOpacity,\n        onTabPress = _this$props.onTabPress,\n        onTabLongPress = _this$props.onTabLongPress,\n        tabStyle = _this$props.tabStyle,\n        labelStyle = _this$props.labelStyle,\n        indicatorStyle = _this$props.indicatorStyle,\n        contentContainerStyle = _this$props.contentContainerStyle,\n        style = _this$props.style,\n        indicatorContainerStyle = _this$props.indicatorContainerStyle;\n      var _this$state2 = this.state,\n        layout = _this$state2.layout,\n        tabWidths = _this$state2.tabWidths;\n      var routes = navigationState.routes;\n      var isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n      var tabBarWidth = this.getTabBarWidth(this.props, this.state);\n      var tabBarWidthPercent = \"\".concat(routes.length * 40, \"%\");\n      var translateX = this.getTranslateX(this.scrollAmount, this.getMaxScrollDistance(tabBarWidth, layout.width));\n      return React.createElement(Animated.View, {\n        onLayout: this.handleLayout,\n        style: [styles.tabBar, style]\n      }, React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.indicatorContainer, scrollEnabled ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : null, tabBarWidth ? {\n          width: tabBarWidth\n        } : scrollEnabled ? {\n          width: tabBarWidthPercent\n        } : null, indicatorContainerStyle]\n      }, this.props.renderIndicator({\n        position: position,\n        layout: layout,\n        navigationState: navigationState,\n        jumpTo: jumpTo,\n        width: isWidthDynamic ? 'auto' : \"\".concat(100 / routes.length, \"%\"),\n        style: indicatorStyle,\n        getTabWidth: this.getMemoizedTabWidthGettter(layout, routes, scrollEnabled, tabWidths, this.getFlattenedTabWidth(tabStyle))\n      })), React.createElement(View, {\n        style: styles.scroll\n      }, React.createElement(Animated.ScrollView, {\n        horizontal: true,\n        accessibilityRole: \"tablist\",\n        keyboardShouldPersistTaps: \"handled\",\n        scrollEnabled: scrollEnabled,\n        bounces: bounces,\n        alwaysBounceHorizontal: false,\n        scrollsToTop: false,\n        showsHorizontalScrollIndicator: false,\n        automaticallyAdjustContentInsets: false,\n        overScrollMode: \"never\",\n        contentContainerStyle: [styles.tabContent, scrollEnabled ? {\n          width: tabBarWidth || tabBarWidthPercent\n        } : styles.container, contentContainerStyle],\n        scrollEventThrottle: 16,\n        onScroll: Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              x: this.scrollAmount\n            }\n          }\n        }]),\n        ref: this.scrollViewRef\n      }, routes.map(function (route) {\n        var props = {\n          key: route.key,\n          position: position,\n          route: route,\n          navigationState: navigationState,\n          getAccessibilityLabel: getAccessibilityLabel,\n          getAccessible: getAccessible,\n          getLabelText: getLabelText,\n          getTestID: getTestID,\n          renderBadge: renderBadge,\n          renderIcon: renderIcon,\n          renderLabel: renderLabel,\n          activeColor: activeColor,\n          inactiveColor: inactiveColor,\n          pressColor: pressColor,\n          pressOpacity: pressOpacity,\n          onLayout: isWidthDynamic ? function (e) {\n            _this2.measuredTabWidths[route.key] = e.nativeEvent.layout.width;\n\n            if (routes.every(function (r) {\n              return typeof _this2.measuredTabWidths[r.key] === 'number';\n            })) {\n              _this2.setState({\n                tabWidths: _objectSpread({}, _this2.measuredTabWidths)\n              });\n            }\n          } : undefined,\n          onPress: function onPress() {\n            var event = {\n              route: route,\n              defaultPrevented: false,\n              preventDefault: function preventDefault() {\n                event.defaultPrevented = true;\n              }\n            };\n            onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n            if (event.defaultPrevented) {\n              return;\n            }\n            _this2.props.jumpTo(route.key);\n          },\n          onLongPress: function onLongPress() {\n            return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n              route: route\n            });\n          },\n          labelStyle: labelStyle,\n          style: tabStyle\n        };\n        return renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props);\n      }))));\n    }\n  }]);\n  return TabBar;\n}(React.Component);\nexport { TabBar as default };\n_defineProperty(TabBar, \"defaultProps\", {\n  getLabelText: function getLabelText(_ref) {\n    var route = _ref.route;\n    return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;\n  },\n  getAccessible: function getAccessible(_ref2) {\n    var route = _ref2.route;\n    return typeof route.accessible !== 'undefined' ? route.accessible : true;\n  },\n  getAccessibilityLabel: function getAccessibilityLabel(_ref3) {\n    var route = _ref3.route;\n    return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n  },\n  getTestID: function getTestID(_ref4) {\n    var route = _ref4.route;\n    return route.testID;\n  },\n  renderIndicator: function renderIndicator(props) {\n    return React.createElement(TabBarIndicator, props);\n  }\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["TabBar.tsx"],"names":["React","Animated","TabBarItem","TabBarIndicator","memoize","scheduleInNextFrame","cb","frame","requestAnimationFrame","cancelAnimationFrame","TabBar","Component","getLabelText","route","title","toUpperCase","getAccessible","accessible","getAccessibilityLabel","accessibilityLabel","undefined","getTestID","testID","renderIndicator","props","layout","width","height","tabWidths","componentDidUpdate","prevProps","prevState","navigationState","state","routes","length","index","getFlattenedTabWidth","tabStyle","every","r","key","resetScroll","componentWillUnmount","cancelNextFrameCb","Value","createRef","style","StyleSheet","flatten","scrollEnabled","flattenedWidth","endsWith","parseFloat","Number","isFinite","i","getComputedTabWidth","tabBarWidth","layoutWidth","reduce","acc","_","value","getTabBarWidth","maxDistance","getMaxScrollDistance","scrollValue","Math","max","min","Platform","OS","I18nManager","isRTL","centerDistance","from","total","tabWidth","scrollAmount","normalizeScrollValue","scrollView","scrollViewRef","current","scrollTo","getNode","x","getScrollAmount","animated","e","nativeEvent","setState","maxScrollDistance","multiply","sub","render","position","jumpTo","bounces","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","getTranslateX","handleLayout","styles","tabBar","indicatorContainer","transform","getTabWidth","getMemoizedTabWidthGettter","scroll","tabContent","container","event","contentOffset","map","onLayout","measuredTabWidths","onPress","defaultPrevented","preventDefault","onLongPress","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport memoize from './memoize';\nimport {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths: { [key: string]: number };\n};\n\nconst scheduleInNextFrame = (cb: () => void) => {\n  let frame = requestAnimationFrame(() => {\n    frame = requestAnimationFrame(cb);\n  });\n\n  return () => cancelAnimationFrame(frame);\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    getLabelText: ({ route }: Scene<Route>) =>\n      typeof route.title === 'string' ? route.title.toUpperCase() : route.title,\n    getAccessible: ({ route }: Scene<Route>) =>\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\n      typeof route.accessibilityLabel === 'string'\n        ? route.accessibilityLabel\n        : typeof route.title === 'string'\n        ? route.title\n        : undefined,\n    getTestID: ({ route }: Scene<Route>) => route.testID,\n    renderIndicator: (props: IndicatorProps<Route>) => (\n      <TabBarIndicator {...props} />\n    ),\n  };\n\n  state: State = {\n    layout: { width: 0, height: 0 },\n    tabWidths: {},\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    const { navigationState } = this.props;\n    const { layout, tabWidths } = this.state;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n    ) {\n      if (\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' &&\n        !(\n          layout.width &&\n          navigationState.routes.every(\n            (r) => typeof tabWidths[r.key] === 'number'\n          )\n        )\n      ) {\n        // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n        return;\n      }\n\n      this.resetScroll(navigationState.index);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancelNextFrameCb?.();\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private cancelNextFrameCb: (() => void) | undefined = undefined;\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n    const tabStyle = StyleSheet.flatten(style);\n\n    return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n    index: number,\n    layout: Layout,\n    routes: Route[],\n    scrollEnabled: boolean | undefined,\n    tabWidths: { [key: string]: number },\n    flattenedWidth: string | number | undefined\n  ) => {\n    if (flattenedWidth === 'auto') {\n      return tabWidths[routes[index].key] || 0;\n    }\n\n    switch (typeof flattenedWidth) {\n      case 'number':\n        return flattenedWidth;\n      case 'string':\n        if (flattenedWidth.endsWith('%')) {\n          const width = parseFloat(flattenedWidth);\n          if (Number.isFinite(width)) {\n            return layout.width * (width / 100);\n          }\n        }\n    }\n\n    if (scrollEnabled) {\n      return (layout.width / 5) * 2;\n    }\n\n    return layout.width / routes.length;\n  };\n\n  private getMemoizedTabWidthGettter = memoize(\n    (\n      layout: Layout,\n      routes: Route[],\n      scrollEnabled: boolean | undefined,\n      tabWidths: { [key: string]: number },\n      flattenedWidth: string | number | undefined\n    ) => (i: number) =>\n      this.getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedWidth\n      )\n  );\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n    tabBarWidth - layoutWidth;\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    return routes.reduce<number>(\n      (acc, _, i) =>\n        acc +\n        this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        ),\n      0\n    );\n  };\n\n  private normalizeScrollValue = (\n    props: Props<T>,\n    state: State,\n    value: number\n  ) => {\n    const { layout } = state;\n    const tabBarWidth = this.getTabBarWidth(props, state);\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n      return maxDistance - scrollValue;\n    }\n\n    return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n      (total, _, i) => {\n        const tabWidth = this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        );\n\n        // To get the current index centered we adjust scroll amount by width of indexes\n        // 0 through (i - 1) and add half the width of current index i\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      },\n      0\n    );\n\n    const scrollAmount = centerDistance - layout.width / 2;\n\n    return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private resetScroll = (index: number) => {\n    if (this.props.scrollEnabled) {\n      // getNode() is not necessary in newer versions of React Native\n      const scrollView =\n        // @ts-ignore\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\n          ? this.scrollViewRef.current\n          : this.scrollViewRef.current?.getNode();\n\n      // @ts-ignore\n      scrollView?.scrollTo({\n        x: this.getScrollAmount(this.props, this.state, index),\n        animated: true,\n      });\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    // If we don't delay this state update, the UI gets stuck in weird state\n    // Maybe an issue in Reanimated?\n    // https://github.com/satya164/react-native-tab-view/issues/877\n    // Cancel any pending callbacks, since we're scheduling a new one\n    this.cancelNextFrameCb?.();\n    this.cancelNextFrameCb = scheduleInNextFrame(() =>\n      this.setState({\n        layout: {\n          height,\n          width,\n        },\n      })\n    );\n  };\n\n  private getTranslateX = memoize(\n    (scrollAmount: Animated.Node<number>, maxScrollDistance: number) =>\n      Animated.multiply(\n        Platform.OS === 'android' && I18nManager.isRTL\n          ? Animated.sub(maxScrollDistance, scrollAmount)\n          : scrollAmount,\n        I18nManager.isRTL ? 1 : -1\n      )\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      jumpTo,\n      scrollEnabled,\n      bounces,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      activeColor,\n      inactiveColor,\n      pressColor,\n      pressOpacity,\n      onTabPress,\n      onTabLongPress,\n      tabStyle,\n      labelStyle,\n      indicatorStyle,\n      contentContainerStyle,\n      style,\n      indicatorContainerStyle,\n    } = this.props;\n    const { layout, tabWidths } = this.state;\n    const { routes } = navigationState;\n\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n    const tabBarWidthPercent = `${routes.length * 40}%`;\n    const translateX = this.getTranslateX(\n      this.scrollAmount,\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\n    );\n\n    return (\n      <Animated.View\n        onLayout={this.handleLayout}\n        style={[styles.tabBar, style]}\n      >\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            styles.indicatorContainer,\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\n            tabBarWidth\n              ? { width: tabBarWidth }\n              : scrollEnabled\n              ? { width: tabBarWidthPercent }\n              : null,\n            indicatorContainerStyle,\n          ]}\n        >\n          {this.props.renderIndicator({\n            position,\n            layout,\n            navigationState,\n            jumpTo,\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\n            style: indicatorStyle,\n            getTabWidth: this.getMemoizedTabWidthGettter(\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              this.getFlattenedTabWidth(tabStyle)\n            ),\n          })}\n        </Animated.View>\n        <View style={styles.scroll}>\n          <Animated.ScrollView\n            horizontal\n            accessibilityRole=\"tablist\"\n            keyboardShouldPersistTaps=\"handled\"\n            scrollEnabled={scrollEnabled}\n            bounces={bounces}\n            alwaysBounceHorizontal={false}\n            scrollsToTop={false}\n            showsHorizontalScrollIndicator={false}\n            automaticallyAdjustContentInsets={false}\n            overScrollMode=\"never\"\n            contentContainerStyle={[\n              styles.tabContent,\n              scrollEnabled\n                ? { width: tabBarWidth || tabBarWidthPercent }\n                : styles.container,\n              contentContainerStyle,\n            ]}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: this.scrollAmount },\n                },\n              },\n            ])}\n            ref={this.scrollViewRef}\n          >\n            {routes.map((route: T) => {\n              const props: TabBarItemProps<T> & { key: string } = {\n                key: route.key,\n                position: position,\n                route: route,\n                navigationState: navigationState,\n                getAccessibilityLabel: getAccessibilityLabel,\n                getAccessible: getAccessible,\n                getLabelText: getLabelText,\n                getTestID: getTestID,\n                renderBadge: renderBadge,\n                renderIcon: renderIcon,\n                renderLabel: renderLabel,\n                activeColor: activeColor,\n                inactiveColor: inactiveColor,\n                pressColor: pressColor,\n                pressOpacity: pressOpacity,\n                onLayout: isWidthDynamic\n                  ? (e) => {\n                      this.measuredTabWidths[route.key] =\n                        e.nativeEvent.layout.width;\n\n                      // When we have measured widths for all of the tabs, we should updates the state\n                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                      if (\n                        routes.every(\n                          (r) =>\n                            typeof this.measuredTabWidths[r.key] === 'number'\n                        )\n                      ) {\n                        this.setState({\n                          tabWidths: { ...this.measuredTabWidths },\n                        });\n                      }\n                    }\n                  : undefined,\n                onPress: () => {\n                  const event: Scene<T> & Event = {\n                    route,\n                    defaultPrevented: false,\n                    preventDefault: () => {\n                      event.defaultPrevented = true;\n                    },\n                  };\n\n                  onTabPress?.(event);\n\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  this.props.jumpTo(route.key);\n                },\n                onLongPress: () => onTabLongPress?.({ route }),\n                labelStyle: labelStyle,\n                style: tabStyle,\n              };\n\n              return renderTabBarItem ? (\n                renderTabBarItem(props)\n              ) : (\n                <TabBarItem {...props} />\n              );\n            })}\n          </Animated.ScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}