{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\n\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n    focusedListeners = _ref.focusedListeners;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addListener = _React$useContext.addListener;\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener of focusedListeners) {\n        var _listener2 = _listener(callback),\n          handled = _listener2.handled,\n          result = _listener2.result;\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","addListener","useContext","listener","useCallback","callback","isFocused","handled","result","useEffect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;;AAcA,eAAe,SAASC,kCAAT,OAGH;EAAA,IAFVC,UADyD,QACzDA,UADyD;IAEzDC,gBAAAA,QAAAA,gBAAAA;EAEA,wBAAwBJ,KAAK,CAACM,UAANN,CAAiBC,wBAAjBD,CAAxB;IAAQK,WAAAA,qBAAAA,WAAAA;EAER,IAAME,QAAQ,GAAG,KAAK,CAACC,WAAN,CACdC,UAAAA,QAAD,EAA8C;IAC5C,IAAIN,UAAU,CAACO,SAAXP,EAAJ,EAA4B;MAC1B,KAAK,IAAMI,SAAX,IAAuBH,gBAAvB,EAAyC;QACvC,iBAA4BG,SAAQ,CAACE,QAAD,CAApC;UAAQE,OAAF,cAAEA,OAAF;UAAWC,MAAAA,cAAAA,MAAAA;QAEjB,IAAID,OAAJ,EAAa;UACX,OAAO;YAAEA,OAAF,EAAEA,OAAF;YAAWC,MAAAA,EAAAA;UAAX,CAAP;QACD;MACF;MAED,OAAO;QAAED,OAAO,EAAE,IAAX;QAAiBC,MAAM,EAAEH,QAAQ,CAACN,UAAD;MAAjC,CAAP;IACD,CAVD,MAUO;MACL,OAAO;QAAEQ,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE;MAA1B,CAAP;IACD;EACF,CAfc,EAgBf,CAACR,gBAAD,EAAmBD,UAAnB,CAhBe,CAAjB;EAmBAH,KAAK,CAACa,SAANb,CAAgB;IAAA,OAAMK,WAAN,KAAA,IAAA,IAAMA,WAAN,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAMA,WAAW,CAAG,OAAH,EAAYE,QAAZ,CAAjCP;EAAAA,GAAwD,CACtDK,WADsD,EAEtDE,QAFsD,CAAxDP,CAAAA;AAID","sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}