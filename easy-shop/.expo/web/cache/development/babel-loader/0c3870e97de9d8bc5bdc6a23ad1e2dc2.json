{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n  var _super = _createSuper(TapGestureHandler);\n  function TapGestureHandler() {\n    var _this;\n    _classCallCheck(this, TapGestureHandler);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.onSuccessfulTap = function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n      _this.onGestureEnded(ev);\n    };\n    return _this;\n  }\n  _createClass(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning &&\n      !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n      if (this.hasGestureFailed) {\n        return;\n      }\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture = this.hammer.get(this.name);\n        if (_gesture.options.enable(_gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n        shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n        _ref$maxDeltaX = _ref.maxDeltaX,\n        maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n        _ref$maxDeltaY = _ref.maxDeltaY,\n        maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n        _ref$numberOfTaps = _ref.numberOfTaps,\n        numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n        _ref$minDurationMs = _ref.minDurationMs,\n        minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n        _ref$maxDelayMs = _ref.maxDelayMs,\n        maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n        _ref$maxDurationMs = _ref.maxDurationMs,\n        maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n        _ref$maxDist = _ref.maxDist,\n        maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n        _ref$minPointers = _ref.minPointers,\n        minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n        _ref$maxPointers = _ref.maxPointers,\n        maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n        props = _objectWithoutProperties(_ref, _excluded);\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n      clearTimeout(this._timer);\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\nexport default TapGestureHandler;","map":{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","onSuccessfulTap","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","Tap","config","maxDelayMs","inputData","isGestureRunning","cancelEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","event","taps","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props"],"sources":["C:/Users/AfroMiNA/OneDrive/Desktop/ecom/mern-stack-ecommerce/easy-shop/node_modules/react-native-gesture-handler/web/TapGestureHandler.js"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = ev => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props) {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}