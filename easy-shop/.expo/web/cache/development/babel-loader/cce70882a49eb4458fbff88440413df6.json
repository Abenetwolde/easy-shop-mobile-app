{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckBox = undefined;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _jsxFileName = 'src/basic/Checkbox.js';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _Ionicons = require(\"@expo/vector-icons/Ionicons\");\nvar _Ionicons2 = _interopRequireDefault(_Ionicons);\nvar _nativeBaseShoutemTheme = require('native-base-shoutem-theme');\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\nvar _platform = require(\"../theme/variables/platform\");\nvar _platform2 = _interopRequireDefault(_platform);\nvar _commonColor = require(\"../theme/variables/commonColor\");\nvar _computeProps = require(\"../utils/computeProps\");\nvar _computeProps2 = _interopRequireDefault(_computeProps);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar CheckBox = function (_Component) {\n  _inherits(CheckBox, _Component);\n  function CheckBox() {\n    _classCallCheck(this, CheckBox);\n    return _possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));\n  }\n  _createClass(CheckBox, [{\n    key: 'getInitialStyle',\n    value: function getInitialStyle(variables) {\n      var _props = this.props,\n        color = _props.color,\n        checked = _props.checked;\n      return {\n        checkStyle: {\n          borderColor: color || variables.checkboxBgColor,\n          backgroundColor: checked === true ? color || variables.checkboxBgColor : variables.checkboxDefaultColor\n        }\n      };\n    }\n  }, {\n    key: 'prepareRootProps',\n    value: function prepareRootProps(variables) {\n      var defaultProps = {\n        style: this.getInitialStyle(variables).checkStyle\n      };\n      return (0, _computeProps2.default)(this.props, defaultProps);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var checked = this.props.checked;\n      var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n      var platformStyle = variables.platformStyle;\n      var platform = variables.platform;\n      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({\n        ref: function ref(c) {\n          return _this2._root = c;\n        }\n      }, this.prepareRootProps(variables), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        }\n      }), _react2.default.createElement(_Ionicons2.default, {\n        style: {\n          color: checked === true ? variables.checkboxTickColor : variables.checkboxDefaultColor,\n          fontSize: variables.CheckboxFontSize,\n          lineHeight: variables.CheckboxIconSize,\n          marginTop: variables.CheckboxIconMarginTop,\n          textShadowRadius: variables.checkboxTextShadowRadius\n        },\n        name: platform === _commonColor.PLATFORM.IOS && platformStyle !== _commonColor.PLATFORM.MATERIAL ? 'ios-checkmark' : 'md-checkmark',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }));\n    }\n  }]);\n  return CheckBox;\n}(_react.Component);\nCheckBox.contextTypes = {\n  theme: _propTypes2.default.object\n};\nCheckBox.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),\n  checked: _propTypes2.default.bool,\n  onPress: _propTypes2.default.func\n});\nvar StyledCheckBox = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.CheckBox', {}, _mapPropsToStyleNames2.default)(CheckBox);\nexports.CheckBox = StyledCheckBox;","map":{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","Component","contextTypes","theme","PropTypes","object","variables","color","checked","props","checkStyle","borderColor","checkboxBgColor","backgroundColor","checkboxDefaultColor","defaultProps","style","getInitialStyle","context","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","PLATFORM","IOS","MATERIAL","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked } = this.props;\n    return {\n      checkStyle: {\n        borderColor: color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked } = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]},"metadata":{},"sourceType":"script"}