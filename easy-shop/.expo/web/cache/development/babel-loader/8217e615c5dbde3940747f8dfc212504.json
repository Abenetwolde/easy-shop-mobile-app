{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath, getActionFromState, NavigationContext } from '@react-navigation/core';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (path) {\n    if (!path.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\".concat(path, \").\"));\n    }\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside a screen in a navigator?\");\n    }\n    var options = linking.options;\n    var state = (options === null || options === void 0 ? void 0 : options.getStateFromPath) ? options.getStateFromPath(path, options.config) : getStateFromPath(path, options === null || options === void 0 ? void 0 : options.config);\n    if (state) {\n      var root = navigation;\n      var current;\n\n      while (current = root.dangerouslyGetParent()) {\n        root = current;\n      }\n      var action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n      if (action !== undefined) {\n        root.dispatch(action);\n      } else {\n        root.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["React","getStateFromPath","getActionFromState","NavigationContext","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","path","startsWith","Error","undefined","options","state","config","root","current","dangerouslyGetParent","action","dispatch","reset"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,wBAJP;AAKA,OAAOC,cAAP;AAEA,eAAe,SAASC,SAAT,GAAqB;EAClC,IAAMC,UAAU,GAAGN,KAAK,CAACO,UAANP,CAAiBG,iBAAjBH,CAAnB;EACA,IAAMQ,OAAO,GAAGR,KAAK,CAACO,UAANP,CAAiBI,cAAjBJ,CAAhB;EAEA,IAAMS,MAAM,GAAG,KAAK,CAACC,WAAN,CACZC,UAAAA,IAAD,EAAkB;IAChB,IAAI,CAACA,IAAI,CAACC,UAALD,CAAgB,GAAhBA,CAAL,EAA2B;MACzB,MAAM,IAAIE,KAAJ,CAAA,gCAAA,CAAA,MAAA,CAA2CF,IAA3C,EAAA,IAAA,CAAA,CAAN;IACD;IAED,IAAIL,UAAU,KAAKQ,SAAnB,EAA8B;MAC5B,MAAM,IAAID,KAAJ,CACJ,sFADI,CAAN;IAGD;IAED,IAAQE,OAAAA,GAAYP,OAApB,CAAQO,OAAAA;IAER,IAAMC,KAAK,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,KAAA,CAAA,GAAA,OAAO,CAAEf,gBAAT,IACVc,OAAO,CAACd,gBAARc,CAAyBJ,IAAzBI,EAA+BA,OAAO,CAACE,MAAvCF,CADU,GAEVd,gBAAgB,CAACU,IAAD,EAAOI,OAAP,KAAA,IAAA,IAAOA,OAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,OAAO,CAAEE,MAAhB,CAFpB;IAIA,IAAID,KAAJ,EAAW;MACT,IAAIE,IAAI,GAAGZ,UAAX;MACA,IAAIa,OAFK;;MAKT,OAAQA,OAAO,GAAGD,IAAI,CAACE,oBAALF,EAAlB,EAAgD;QAC9CA,IAAI,GAAGC,OAAPD;MACD;MAED,IAAMG,MAAM,GAAGnB,kBAAkB,CAACc,KAAD,EAAQD,OAAR,KAAA,IAAA,IAAQA,OAAR,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAQA,OAAO,CAAEE,MAAjB,CAAjC;MAEA,IAAII,MAAM,KAAKP,SAAf,EAA0B;QACxBI,IAAI,CAACI,QAALJ,CAAcG,MAAdH,CAAAA;MACD,CAFD,MAEO;QACLA,IAAI,CAACK,KAALL,CAAWF,KAAXE,CAAAA;MACD;IACF,CAhBD,MAgBO;MACL,MAAM,IAAIL,KAAJ,CAAU,iDAAV,CAAN;IACD;EACF,CArCY,EAsCb,CAACL,OAAD,EAAUF,UAAV,CAtCa,CAAf;EAyCA,OAAOG,MAAP;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.dangerouslyGetParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}