{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Text, Left, Right, ListItem, Thumbnail, Body } from \"native-base\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../Redux/Actions/cartActions\";\nimport Toast from \"react-native-toast-message\";\nimport axios from \"axios\";\nimport baseURL from \"../../../assets/common/baseUrl\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get(\"window\"),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar Confirm = function Confirm(props) {\n  var finalOrder = props.route.params;\n\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    productUpdate = _useState2[0],\n    setProductUpdate = _useState2[1];\n  useEffect(function () {\n    if (finalOrder) {\n      getProducts(finalOrder);\n    }\n    return function () {\n      setProductUpdate();\n    };\n  }, [props]);\n\n  var getProducts = function getProducts(x) {\n    var order = x.order.order;\n    var products = [];\n    if (order) {\n      order.orderItems.forEach(function (cart) {\n        axios.get(baseURL + \"products/\" + cart.product).then(function (data) {\n          products.push(data.data);\n          setProductUpdate(products);\n        }).catch(function (e) {\n          console.log(e);\n        });\n      });\n    }\n  };\n  var confirmOrder = function confirmOrder() {\n    var order = finalOrder.order.order;\n    axios.post(baseURL + \"orders\", order).then(function (res) {\n      if (res.status == 200 || res.status == 201) {\n        Toast.show({\n          topOffset: 60,\n          type: \"success\",\n          text1: \"Order Completed\",\n          text2: \"\"\n        });\n        setTimeout(function () {\n          props.clearCart();\n          props.navigation.navigate(\"Cart\");\n        }, 500);\n      }\n    }).catch(function (error) {\n      Toast.show({\n        topOffset: 60,\n        type: \"error\",\n        text1: \"Something went wrong\",\n        text2: \"Please try again\"\n      });\n    });\n  };\n  return _jsx(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: _jsxs(View, {\n      style: styles.titleContainer,\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 20,\n          fontWeight: \"bold\"\n        },\n        children: \"Confirm Order\"\n      }), props.route.params ? _jsxs(View, {\n        style: {\n          borderWidth: 1,\n          borderColor: \"orange\"\n        },\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: \"Shipping to:\"\n        }), _jsxs(View, {\n          style: {\n            padding: 8\n          },\n          children: [_jsxs(Text, {\n            children: [\"Address: \", finalOrder.order.order.shippingAddress1]\n          }), _jsxs(Text, {\n            children: [\"Address2: \", finalOrder.order.order.shippingAddress2]\n          }), _jsxs(Text, {\n            children: [\"City: \", finalOrder.order.order.city]\n          }), _jsxs(Text, {\n            children: [\"Zip Code: \", finalOrder.order.order.zip]\n          }), _jsxs(Text, {\n            children: [\"Country: \", finalOrder.order.order.country]\n          })]\n        }), _jsx(Text, {\n          style: styles.title,\n          children: \"Items:\"\n        }), productUpdate && _jsx(_Fragment, {\n          children: productUpdate.map(function (x) {\n            return _jsxs(ListItem, {\n              style: styles.listItem,\n              avatar: true,\n              children: [_jsx(Left, {\n                children: _jsx(Thumbnail, {\n                  source: {\n                    uri: x.image\n                  }\n                })\n              }), _jsxs(Body, {\n                style: styles.body,\n                children: [_jsx(Left, {\n                  children: _jsx(Text, {\n                    children: x.name\n                  })\n                }), _jsx(Right, {\n                  children: _jsxs(Text, {\n                    children: [\"$ \", x.price]\n                  })\n                })]\n              })]\n            }, x.name);\n          })\n        })]\n      }) : null, _jsx(View, {\n        style: {\n          alignItems: \"center\",\n          margin: 20\n        },\n        children: _jsx(Button, {\n          title: \"Place order\",\n          onPress: confirmOrder\n        })\n      })]\n    })\n  });\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearCart: function clearCart() {\n      return dispatch(actions.clearCart());\n    }\n  };\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: height,\n    padding: 8,\n    alignContent: \"center\",\n    backgroundColor: \"white\"\n  },\n  titleContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 8\n  },\n  title: {\n    alignSelf: \"center\",\n    margin: 8,\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  listItem: {\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    justifyContent: \"center\",\n    width: width / 1.2\n  },\n  body: {\n    margin: 10,\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  }\n});\nexport default connect(null, mapDispatchToProps)(Confirm);","map":{"version":3,"names":["React","useEffect","useState","Text","Left","Right","ListItem","Thumbnail","Body","connect","actions","Toast","axios","baseURL","Dimensions","get","width","height","Confirm","props","finalOrder","route","params","productUpdate","setProductUpdate","getProducts","x","order","products","orderItems","forEach","cart","product","then","data","push","catch","e","console","log","confirmOrder","post","res","status","show","topOffset","type","text1","text2","setTimeout","clearCart","navigation","navigate","error","styles","container","titleContainer","fontSize","fontWeight","borderWidth","borderColor","title","padding","shippingAddress1","shippingAddress2","city","zip","country","map","listItem","uri","image","body","name","price","alignItems","margin","mapDispatchToProps","dispatch","StyleSheet","create","alignContent","backgroundColor","justifyContent","alignSelf","flexDirection"],"sources":["C:/Users/AfroMiNA/OneDrive/Desktop/ecom/mern-stack-ecommerce/easy-shop/Screens/Cart/Checkout/Confirm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, StyleSheet, Dimensions, ScrollView, Button } from \"react-native\";\r\nimport { Text, Left, Right, ListItem, Thumbnail, Body } from \"native-base\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../Redux/Actions/cartActions\";\r\n\r\nimport Toast from \"react-native-toast-message\";\r\nimport axios from \"axios\";\r\nimport baseURL from \"../../../assets/common/baseUrl\";\r\n\r\nvar { width, height } = Dimensions.get(\"window\");\r\n\r\nconst Confirm = (props) => {\r\n  const finalOrder = props.route.params;\r\n\r\n  // Add this\r\n  const [productUpdate, setProductUpdate] = useState();\r\n  useEffect(() => {\r\n      if(finalOrder) {\r\n        getProducts(finalOrder);\r\n      }\r\n    return () => {\r\n      setProductUpdate();\r\n    };\r\n  }, [props]);\r\n\r\n  // Add this\r\n  const getProducts = (x) => {\r\n    const order = x.order.order;\r\n    var products = [];\r\n    if(order) {\r\n        order.orderItems.forEach((cart) => {\r\n            axios\r\n              .get(`${baseURL}products/${cart.product}`)\r\n              .then((data) => {\r\n                products.push(data.data);\r\n                setProductUpdate(products);\r\n              })\r\n              .catch((e) => {\r\n                console.log(e);\r\n              });\r\n          });\r\n    }\r\n    \r\n  };\r\n\r\n  const confirmOrder = () => {\r\n    const order = finalOrder.order.order;\r\n    axios\r\n      .post(`${baseURL}orders`, order)\r\n      .then((res) => {\r\n        if (res.status == 200 || res.status == 201) {\r\n          Toast.show({\r\n            topOffset: 60,\r\n            type: \"success\",\r\n            text1: \"Order Completed\",\r\n            text2: \"\",\r\n          });\r\n          setTimeout(() => {\r\n            props.clearCart();\r\n            props.navigation.navigate(\"Cart\");\r\n          }, 500);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        Toast.show({\r\n          topOffset: 60,\r\n          type: \"error\",\r\n          text1: \"Something went wrong\",\r\n          text2: \"Please try again\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={styles.container}>\r\n      <View style={styles.titleContainer}>\r\n        <Text style={{ fontSize: 20, fontWeight: \"bold\" }}>Confirm Order</Text>\r\n        {props.route.params ? (\r\n          <View style={{ borderWidth: 1, borderColor: \"orange\" }}>\r\n            <Text style={styles.title}>Shipping to:</Text>\r\n            <View style={{ padding: 8 }}>\r\n              <Text>Address: {finalOrder.order.order.shippingAddress1}</Text>\r\n              <Text>Address2: {finalOrder.order.order.shippingAddress2}</Text>\r\n              <Text>City: {finalOrder.order.order.city}</Text>\r\n              <Text>Zip Code: {finalOrder.order.order.zip}</Text>\r\n              <Text>Country: {finalOrder.order.order.country}</Text>\r\n            </View>\r\n            <Text style={styles.title}>Items:</Text>\r\n            {/* CHANGE THIS */}\r\n            {productUpdate && (\r\n              <>\r\n                {productUpdate.map((x) => {\r\n                  return (\r\n                    <ListItem style={styles.listItem} key={x.name} avatar>\r\n                      <Left>\r\n                        <Thumbnail source={{ uri: x.image }} />\r\n                      </Left>\r\n                      <Body style={styles.body}>\r\n                        <Left>\r\n                          <Text>{x.name}</Text>\r\n                        </Left>\r\n                        <Right>\r\n                          <Text>$ {x.price}</Text>\r\n                        </Right>\r\n                      </Body>\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </>\r\n            )}\r\n          </View>\r\n        ) : null}\r\n        <View style={{ alignItems: \"center\", margin: 20 }}>\r\n          <Button title={\"Place order\"} onPress={confirmOrder} />\r\n        </View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    clearCart: () => dispatch(actions.clearCart()),\r\n  };\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    height: height,\r\n    padding: 8,\r\n    alignContent: \"center\",\r\n    backgroundColor: \"white\",\r\n  },\r\n  titleContainer: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    margin: 8,\r\n  },\r\n  title: {\r\n    alignSelf: \"center\",\r\n    margin: 8,\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n  },\r\n  listItem: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"white\",\r\n    justifyContent: \"center\",\r\n    width: width / 1.2,\r\n  },\r\n  body: {\r\n    margin: 10,\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n  },\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Confirm);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}