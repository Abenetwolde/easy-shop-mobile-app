{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SwipeRow = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = 'src/basic/SwipeRow.js';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _nativeBaseShoutemTheme = require('native-base-shoutem-theme');\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nvar _Left = require(\"./Left\");\n\nvar _Right = require(\"./Right\");\n\nvar _Body = require(\"./Body\");\n\nvar _ListItem = require(\"./ListItem\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PREVIEW_OPEN_DELAY = 700;\nvar PREVIEW_CLOSE_DELAY = 300;\n\nvar SwipeRow = function (_Component) {\n  _inherits(SwipeRow, _Component);\n\n  function SwipeRow(props) {\n    _classCallCheck(this, SwipeRow);\n\n    var _this = _possibleConstructorReturn(this, (SwipeRow.__proto__ || Object.getPrototypeOf(SwipeRow)).call(this, props));\n\n    _this.horizontalSwipeGestureBegan = false;\n    _this.swipeInitialX = null;\n    _this.parentScrollEnabled = true;\n    _this.ranPreview = false;\n    _this.state = {\n      dimensionsSet: false,\n      hiddenHeight: 0,\n      hiddenWidth: 0\n    };\n    _this._translateX = new _reactNative.Animated.Value(0);\n    return _this;\n  }\n\n  _createClass(SwipeRow, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._panResponder = _reactNative.PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {\n          return _this2.handleOnMoveShouldSetPanResponder(e, gs);\n        },\n        onPanResponderMove: function onPanResponderMove(e, gs) {\n          return _this2.handlePanResponderMove(e, gs);\n        },\n        onPanResponderRelease: function onPanResponderRelease(e, gs) {\n          return _this2.handlePanResponderEnd(e, gs);\n        },\n        onPanResponderTerminate: function onPanResponderTerminate(e, gs) {\n          return _this2.handlePanResponderEnd(e, gs);\n        },\n        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(_) {\n          return false;\n        }\n      });\n    }\n  }, {\n    key: 'getPreviewAnimation',\n    value: function getPreviewAnimation(toValue, delay) {\n      return _reactNative.Animated.timing(this._translateX, {\n        duration: this.props.previewDuration,\n        toValue: toValue,\n        delay: delay,\n        useNativeDriver: true\n      });\n    }\n  }, {\n    key: 'onContentLayout',\n    value: function onContentLayout(e) {\n      var _this3 = this;\n\n      this.setState({\n        dimensionsSet: !this.props.recalculateHiddenLayout,\n        hiddenHeight: e.nativeEvent.layout.height,\n        hiddenWidth: e.nativeEvent.layout.width\n      });\n\n      if (this.props.preview && !this.ranPreview) {\n        this.ranPreview = true;\n        var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n        this.getPreviewAnimation(previewOpenValue, PREVIEW_OPEN_DELAY).start(function (_) {\n          _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\n        });\n      }\n    }\n  }, {\n    key: 'handleOnMoveShouldSetPanResponder',\n    value: function handleOnMoveShouldSetPanResponder(e, gs) {\n      var dx = gs.dx;\n      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n  }, {\n    key: 'handlePanResponderMove',\n    value: function handlePanResponderMove(e, gestureState) {\n      var dx = gestureState.dx,\n          dy = gestureState.dy;\n      var absDx = Math.abs(dx);\n      var absDy = Math.abs(dy);\n\n      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {\n        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n          return;\n        }\n\n        if (this.parentScrollEnabled) {\n          this.parentScrollEnabled = false;\n          this.props.setScrollEnabled && this.props.setScrollEnabled(false);\n        }\n\n        if (this.swipeInitialX === null) {\n          this.swipeInitialX = this._translateX._value;\n        }\n\n        if (!this.horizontalSwipeGestureBegan) {\n          this.horizontalSwipeGestureBegan = true;\n          this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n        }\n\n        var newDX = this.swipeInitialX + dx;\n\n        if (this.props.disableLeftSwipe && newDX < 0) {\n          newDX = 0;\n        }\n\n        if (this.props.disableRightSwipe && newDX > 0) {\n          newDX = 0;\n        }\n\n        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n          newDX = this.props.stopLeftSwipe;\n        }\n\n        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {\n          newDX = this.props.stopRightSwipe;\n        }\n\n        this._translateX.setValue(newDX);\n      }\n    }\n  }, {\n    key: 'handlePanResponderEnd',\n    value: function handlePanResponderEnd(e, gestureState) {\n      if (!this.parentScrollEnabled) {\n        this.parentScrollEnabled = true;\n        this.props.setScrollEnabled && this.props.setScrollEnabled(true);\n      }\n\n      var toValue = 0;\n\n      if (this._translateX._value >= 0) {\n        if (this._translateX._value > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.props.leftOpenValue;\n        }\n      } else {\n        if (this._translateX._value < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.props.rightOpenValue;\n        }\n      }\n\n      this.manuallySwipeRow(toValue);\n    }\n  }, {\n    key: 'closeRow',\n    value: function closeRow() {\n      this.manuallySwipeRow(0);\n    }\n  }, {\n    key: 'openLeftRow',\n    value: function openLeftRow() {\n      this.manuallySwipeRow(this.props.leftOpenValue);\n    }\n  }, {\n    key: 'openRightRow',\n    value: function openRightRow() {\n      this.manuallySwipeRow(this.props.rightOpenValue);\n    }\n  }, {\n    key: 'manuallySwipeRow',\n    value: function manuallySwipeRow(toValue) {\n      var _this4 = this;\n\n      _reactNative.Animated.spring(this._translateX, {\n        toValue: toValue,\n        friction: this.props.friction,\n        tension: this.props.tension,\n        useNativeDriver: true\n      }).start(function (_) {\n        if (toValue === 0) {\n          _this4.props.onRowDidClose && _this4.props.onRowDidClose();\n        } else {\n          _this4.props.onRowDidOpen && _this4.props.onRowDidOpen();\n        }\n      });\n\n      if (toValue === 0) {\n        this.props.onRowClose && this.props.onRowClose();\n      } else {\n        this.props.onRowOpen && this.props.onRowOpen(toValue);\n      }\n\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: 'renderMainContent',\n    value: function renderMainContent() {\n      var _this5 = this;\n\n      if (this.state.dimensionsSet) {\n        return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {\n          style: {\n            transform: [{\n              translateX: this._translateX\n            }],\n            zIndex: 2\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          }\n        }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, {\n          list: true,\n          style: this.props.style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          }\n        }, this.props.body) : _react2.default.createElement(_reactNative.View, {\n          style: [{\n            backgroundColor: '#FFF'\n          }, this.props.style],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          }\n        }, this.props.body));\n      }\n\n      return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {\n        onLayout: function onLayout(e) {\n          return _this5.onContentLayout(e);\n        },\n        style: {\n          transform: [{\n            translateX: this._translateX\n          }],\n          zIndex: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        }\n      }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, {\n        list: true,\n        style: this.props.style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        }\n      }, this.props.body) : _react2.default.createElement(_reactNative.View, {\n        style: [{\n          backgroundColor: '#FFF'\n        }, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        }\n      }, this.props.body));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(_reactNative.View, {\n        style: this.props.style ? this.props.style : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        }\n      }, _react2.default.createElement(_reactNative.View, {\n        style: [styles.hidden, {\n          height: this.state.hiddenHeight,\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'space-between'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        }\n      }, _react2.default.createElement(_Left.Left, {\n        style: {\n          width: this.props.leftOpenValue,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        }\n      }, this.props.left), _react2.default.createElement(_Body.Body, {\n        style: {\n          flex: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        }\n      }), _react2.default.createElement(_Right.Right, {\n        style: {\n          width: -this.props.rightOpenValue,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        }\n      }, this.props.right)), this.renderMainContent());\n    }\n  }]);\n\n  return SwipeRow;\n}(_react.Component);\n\nSwipeRow.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowPress: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  preview: false,\n  previewDuration: 300,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50\n};\nvar styles = {\n  container: {},\n  hidden: {\n    bottom: 0,\n    left: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    right: 0,\n    top: 0\n  }\n};\nvar StyledSwipeRow = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.SwipeRow', {}, _mapPropsToStyleNames2.default)(SwipeRow);\nexports.SwipeRow = StyledSwipeRow;","map":{"version":3,"sources":["../../../src/basic/SwipeRow.js"],"names":["PREVIEW_OPEN_DELAY","PREVIEW_CLOSE_DELAY","SwipeRow","Component","defaultProps","leftOpenValue","rightOpenValue","closeOnRowPress","disableLeftSwipe","disableRightSwipe","recalculateHiddenLayout","preview","previewDuration","directionalDistanceChangeThreshold","swipeToOpenPercent","dimensionsSet","hiddenHeight","hiddenWidth","Animated","PanResponder","onMoveShouldSetPanResponder","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","onShouldBlockNativeResponder","toValue","delay","duration","useNativeDriver","e","previewOpenValue","gs","dx","Math","gestureState","dy","absDx","absDy","newDX","friction","tension","transform","translateX","zIndex","backgroundColor","styles","height","flex","flexDirection","justifyContent","width","container","hidden","bottom","left","overflow","position","right","top","StyledSwipeRow","mapPropsToStyleNames"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, PanResponder, View } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nimport { Left } from './Left';\nimport { Right } from './Right';\nimport { Body } from './Body';\nimport { ListItem } from './ListItem';\n\nconst PREVIEW_OPEN_DELAY = 700;\nconst PREVIEW_CLOSE_DELAY = 300;\n\nclass SwipeRow extends Component {\n  static defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowPress: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    preview: false,\n    previewDuration: 300,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50\n  };\n  constructor(props) {\n    super(props);\n    this.horizontalSwipeGestureBegan = false;\n    this.swipeInitialX = null;\n    this.parentScrollEnabled = true;\n    this.ranPreview = false;\n    this.state = {\n      dimensionsSet: false,\n      hiddenHeight: 0,\n      hiddenWidth: 0\n    };\n    this._translateX = new Animated.Value(0);\n  }\n\n  componentDidMount() {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: (e, gs) =>\n        this.handleOnMoveShouldSetPanResponder(e, gs),\n      onPanResponderMove: (e, gs) => this.handlePanResponderMove(e, gs),\n      onPanResponderRelease: (e, gs) => this.handlePanResponderEnd(e, gs),\n      onPanResponderTerminate: (e, gs) => this.handlePanResponderEnd(e, gs),\n      onShouldBlockNativeResponder: _ => false\n    });\n  }\n\n  getPreviewAnimation(toValue, delay) {\n    return Animated.timing(this._translateX, {\n      duration: this.props.previewDuration,\n      toValue,\n      delay,\n      useNativeDriver: true\n    });\n  }\n\n  onContentLayout(e) {\n    this.setState({\n      dimensionsSet: !this.props.recalculateHiddenLayout,\n      hiddenHeight: e.nativeEvent.layout.height,\n      hiddenWidth: e.nativeEvent.layout.width\n    });\n\n    if (this.props.preview && !this.ranPreview) {\n      this.ranPreview = true;\n      const previewOpenValue =\n        this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n      this.getPreviewAnimation(previewOpenValue, PREVIEW_OPEN_DELAY).start(\n        _ => {\n          this.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\n        }\n      );\n    }\n  }\n\n  handleOnMoveShouldSetPanResponder(e, gs) {\n    const { dx } = gs;\n    return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    const { dx, dy } = gestureState;\n    const absDx = Math.abs(dx);\n    const absDy = Math.abs(dy);\n\n    // this check may not be necessary because we don't capture the move until we pass the threshold\n    // just being extra safe here\n    if (\n      absDx > this.props.directionalDistanceChangeThreshold ||\n      absDy > this.props.directionalDistanceChangeThreshold\n    ) {\n      // we have enough to determine direction\n      if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n        // user is moving vertically, do nothing, listView will handle\n        return;\n      }\n\n      // user is moving horizontally\n      if (this.parentScrollEnabled) {\n        // disable scrolling on the listView parent\n        this.parentScrollEnabled = false;\n        this.props.setScrollEnabled && this.props.setScrollEnabled(false);\n      }\n\n      if (this.swipeInitialX === null) {\n        // set tranlateX value when user started swiping\n        this.swipeInitialX = this._translateX._value;\n      }\n      if (!this.horizontalSwipeGestureBegan) {\n        this.horizontalSwipeGestureBegan = true;\n        this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n      }\n\n      let newDX = this.swipeInitialX + dx;\n      if (this.props.disableLeftSwipe && newDX < 0) {\n        newDX = 0;\n      }\n      if (this.props.disableRightSwipe && newDX > 0) {\n        newDX = 0;\n      }\n\n      if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n        newDX = this.props.stopLeftSwipe;\n      }\n      if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {\n        newDX = this.props.stopRightSwipe;\n      }\n\n      this._translateX.setValue(newDX);\n    }\n  }\n\n  handlePanResponderEnd(e, gestureState) {\n    // re-enable scrolling on listView parent\n    if (!this.parentScrollEnabled) {\n      this.parentScrollEnabled = true;\n      this.props.setScrollEnabled && this.props.setScrollEnabled(true);\n    }\n\n    // finish up the animation\n    let toValue = 0;\n    if (this._translateX._value >= 0) {\n      // trying to open right\n      if (\n        this._translateX._value >\n        this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)\n      ) {\n        // we're more than halfway\n        toValue = this.props.leftOpenValue;\n      }\n    } else {\n      // trying to open left\n      if (\n        this._translateX._value <\n        this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)\n      ) {\n        // we're more than halfway\n        toValue = this.props.rightOpenValue;\n      }\n    }\n\n    this.manuallySwipeRow(toValue);\n  }\n\n  /*\n   * This method is called by SwipeListView\n   */\n  closeRow() {\n    this.manuallySwipeRow(0);\n  }\n\n  openLeftRow() {\n    this.manuallySwipeRow(this.props.leftOpenValue);\n  }\n\n  openRightRow() {\n    this.manuallySwipeRow(this.props.rightOpenValue);\n  }\n\n  manuallySwipeRow(toValue) {\n    Animated.spring(this._translateX, {\n      toValue,\n      friction: this.props.friction,\n      tension: this.props.tension,\n      useNativeDriver: true\n    }).start(_ => {\n      if (toValue === 0) {\n        this.props.onRowDidClose && this.props.onRowDidClose();\n      } else {\n        this.props.onRowDidOpen && this.props.onRowDidOpen();\n      }\n    });\n\n    if (toValue === 0) {\n      this.props.onRowClose && this.props.onRowClose();\n    } else {\n      this.props.onRowOpen && this.props.onRowOpen(toValue);\n    }\n\n    // reset everything\n    this.swipeInitialX = null;\n    this.horizontalSwipeGestureBegan = false;\n  }\n\n  renderMainContent() {\n    // We do this annoying if statement for performance.\n    // We don't want the onLayout func to run after it runs once.\n    if (this.state.dimensionsSet) {\n      return (\n        <Animated.View\n          {...this._panResponder.panHandlers}\n          style={{\n            transform: [{ translateX: this._translateX }],\n            zIndex: 2\n          }}\n        >\n          {!this.props.list ? (\n            <ListItem list style={this.props.style}>\n              {this.props.body}\n            </ListItem>\n          ) : (\n            <View style={[{ backgroundColor: '#FFF' }, this.props.style]}>\n              {this.props.body}\n            </View>\n          )}\n        </Animated.View>\n      );\n    }\n    return (\n      <Animated.View\n        {...this._panResponder.panHandlers}\n        onLayout={e => this.onContentLayout(e)}\n        style={{\n          transform: [{ translateX: this._translateX }],\n          zIndex: 2\n        }}\n      >\n        {!this.props.list ? (\n          <ListItem list style={this.props.style}>\n            {this.props.body}\n          </ListItem>\n        ) : (\n          <View style={[{ backgroundColor: '#FFF' }, this.props.style]}>\n            {this.props.body}\n          </View>\n        )}\n      </Animated.View>\n    );\n  }\n\n  render() {\n    return (\n      <View style={this.props.style ? this.props.style : undefined}>\n        <View\n          style={[\n            styles.hidden,\n            {\n              height: this.state.hiddenHeight,\n              flex: 1,\n              flexDirection: 'row',\n              justifyContent: 'space-between'\n            }\n          ]}\n        >\n          <Left style={{ width: this.props.leftOpenValue, zIndex: 1 }}>\n            {this.props.left}\n          </Left>\n          <Body style={{ flex: 0 }} />\n          <Right style={{ width: -this.props.rightOpenValue, zIndex: 1 }}>\n            {this.props.right}\n          </Right>\n        </View>\n        {this.renderMainContent()}\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    // As of RN 0.29 flex: 1 is causing all rows to be the same height\n    // flex: 1\n  },\n  hidden: {\n    bottom: 0,\n    left: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    right: 0,\n    top: 0\n  }\n};\n\nconst StyledSwipeRow = connectStyle(\n  'NativeBase.SwipeRow',\n  {},\n  mapPropsToStyleNames\n)(SwipeRow);\nexport { StyledSwipeRow as SwipeRow };\n"]},"metadata":{},"sourceType":"script"}