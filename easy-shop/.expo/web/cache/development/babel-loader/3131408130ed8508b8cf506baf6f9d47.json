{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from \"./NavigationContext\";\n\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n    emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["React","NavigationContext","useFocusEvents","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP;;AAYA,eAAe,SAASC,cAAT,OAGI;EAAA,IAFjBC,KADoE,QACpEA,KADoE;IAEpEC,OAAAA,QAAAA,OAAAA;EAEA,IAAMC,UAAU,GAAGL,KAAK,CAACM,UAANN,CAAiBC,iBAAjBD,CAAnB;EACA,IAAMO,iBAAiB,GAAGP,KAAK,CAACQ,MAANR,EAA1B;EAEA,IAAMS,iBAAiB,GAAGN,KAAK,CAACO,MAANP,CAAaA,KAAK,CAACQ,KAAnBR,CAAAA,CAA0BS,GAJnC;;EAQjBZ,KAAK,CAACa,SAANb,CACE;IAAA,OACE,UADF,KAAA,IAAA,IACE,UADF,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACE,UAAU,CAAEc,WAAZ,CAAwB,OAAxB,EAAiC,YAAM;MACrCP,iBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;MACAH,OAAO,CAACY,IAARZ,CAAa;QAAEa,IAAI,EAAE,OAAR;QAAiBC,MAAM,EAAET;MAAzB,CAAbL,CAAAA;IACD,CAHD,CAFJJ;EAAAA,GAME,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANFL,CAAAA;EASAA,KAAK,CAACa,SAANb,CACE;IAAA,OACE,UADF,KAAA,IAAA,IACE,UADF,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACE,UAAU,CAAEc,WAAZ,CAAwB,MAAxB,EAAgC,YAAM;MACpCP,iBAAiB,CAACQ,OAAlBR,GAA4BY,SAA5BZ;MACAH,OAAO,CAACY,IAARZ,CAAa;QAAEa,IAAI,EAAE,MAAR;QAAgBC,MAAM,EAAET;MAAxB,CAAbL,CAAAA;IACD,CAHD,CAFJJ;EAAAA,GAME,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANFL,CAAAA;EASAA,KAAK,CAACa,SAANb,CAAgB,YAAM;IACpB,IAAMoB,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;IAEAR,iBAAiB,CAACQ,OAAlBR,GAA4BE,iBAHR;;IAOpB,IAAIW,cAAc,KAAKD,SAAnBC,IAAgC,CAACf,UAArC,EAAiD;MAC/CD,OAAO,CAACY,IAARZ,CAAa;QAAEa,IAAI,EAAE,OAAR;QAAiBC,MAAM,EAAET;MAAzB,CAAbL,CAAAA;IARkB;;IAapB,IACEgB,cAAc,KAAKX,iBAAnBW,IACA,EAAEf,UAAU,GAAGA,UAAU,CAACgB,SAAXhB,EAAH,GAA4B,IAAxC,CAFF,EAGE;MACA;IACD;IAED,IAAIe,cAAc,KAAKD,SAAvB,EAAkC;MAEhC;IACD;IAEDf,OAAO,CAACY,IAARZ,CAAa;MAAEa,IAAI,EAAE,MAAR;MAAgBC,MAAM,EAAEE;IAAxB,CAAbhB,CAAAA;IACAA,OAAO,CAACY,IAARZ,CAAa;MAAEa,IAAI,EAAE,OAAR;MAAiBC,MAAM,EAAET;IAAzB,CAAbL,CAAAA;EACD,CA3BDJ,EA2BG,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CA3BHL,CAAAA;AA4BD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}