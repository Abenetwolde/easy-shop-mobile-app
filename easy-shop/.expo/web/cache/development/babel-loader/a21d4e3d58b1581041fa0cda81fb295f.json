{"ast":null,"code":"import { SUPPRESS_STATE_ACCESS_WARNING } from \"./useRouteCache\";\nexport default function getFocusedRouteNameFromRoute(route) {\n  var _state$index;\n  SUPPRESS_STATE_ACCESS_WARNING.value = true;\n  var state = route.state;\n  SUPPRESS_STATE_ACCESS_WARNING.value = false;\n  var params = route.params;\n  var routeName = state ?\n  state.routes[\n  (_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name :\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}","map":{"version":3,"sources":["getFocusedRouteNameFromRoute.tsx"],"names":["SUPPRESS_STATE_ACCESS_WARNING","getFocusedRouteNameFromRoute","route","value","state","params","routeName","routes","index","type","length","name","screen","undefined"],"mappings":"AAKA,SAASA,6BAAT;AAEA,eAAe,SAASC,4BAAT,CACbC,KADa,EAEO;EAAA,IAAA,YAAA;EACpBF,6BAA6B,CAACG,KAA9BH,GAAsC,IAAtCA;EAEA,IAAMI,KAAK,GAAGF,KAAK,CAACE,KAApB;EAEAJ,6BAA6B,CAACG,KAA9BH,GAAsC,KAAtCA;EAEA,IAAMK,MAAM,GAAGH,KAAK,CAACG,MAArB;EAEA,IAAMC,SAAS,GAAGF,KAAK;EAEnBA,KAAK,CAACG,MAANH;EAAAA,CAAAA,YAAAA,GAGEA,KAAK,CAACI,KAHRJ,MAAAA,IAAAA,IAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAAA,YAAAA,GAIK,OAAOA,KAAK,CAACK,IAAb,KAAsB,QAAtB,IAAkCL,KAAK,CAACK,IAANL,KAAe,OAAjD,GACG,CADH,GAEGA,KAAK,CAACG,MAANH,CAAaM,MAAbN,GAAsB,CAN9BA,CAAAA,CAOEO,IATiB;EAWrB,QAAON,MAAP,KAAA,IAAA,IAAOA,MAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,MAAM,CAAEO,MAAf,CAAA,KAA0B,QAA1B,GACEP,MAAM,CAACO,MADT,GAEEC,SAbJ;EAeA,OAAOP,SAAP;AACD","sourcesContent":["import type {\n  Route,\n  PartialState,\n  NavigationState,\n} from '@react-navigation/routers';\nimport { SUPPRESS_STATE_ACCESS_WARNING } from './useRouteCache';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>> & { state?: PartialState<NavigationState> }\n): string | undefined {\n  SUPPRESS_STATE_ACCESS_WARNING.value = true;\n\n  const state = route.state;\n\n  SUPPRESS_STATE_ACCESS_WARNING.value = false;\n\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n"]},"metadata":{},"sourceType":"module"}