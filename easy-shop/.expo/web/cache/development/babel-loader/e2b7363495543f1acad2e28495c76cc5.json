{"ast":null,"code":"import { always, block, call, clockRunning, cond, set, startClock, stopClock } from \"../base\";\nimport Clock from \"../core/AnimatedClock\";\nimport { evaluateOnce } from \"../derived/evaluateOnce\";\nfunction createOldAnimationObject(node, animationStateDefaults, value, config) {\n  var newClock = new Clock();\n  var currentState = animationStateDefaults();\n  var alwaysNode;\n  var isStarted = false;\n  var isDone = false;\n  var wasStopped = false;\n  var animationCallback;\n  var animation = {\n    start: function start(currentAnimationCallback) {\n      animationCallback = currentAnimationCallback;\n      if (isStarted) {\n        animationCallback && animationCallback({\n          finished: false\n        });\n        return;\n      }\n      if (isDone) {\n        console.warn('Animation has been finished before');\n\n        return;\n      }\n      if (!value.isNativelyInitialized()) {\n        return;\n      }\n      isStarted = true;\n      evaluateOnce(set(currentState.position, value), currentState.position, function () {\n        alwaysNode = always(set(value, block([cond(clockRunning(newClock), 0, startClock(newClock)), node(newClock, currentState, config), cond(currentState.finished, [call([], function () {\n          isStarted = false;\n          if (!wasStopped) {\n            isDone = true;\n          }\n          value.__detachAnimation(animation);\n          isDone = true;\n          if (!wasStopped) {\n            wasStopped = false;\n          }\n        }), stopClock(newClock)]), currentState.position])));\n        value.__attachAnimation(animation);\n        alwaysNode.__addChild(value);\n      });\n    },\n    __detach: function __detach() {\n      animationCallback && animationCallback({\n        finished: isDone\n      });\n      animationCallback = null;\n      value.__initialized && alwaysNode.__removeChild(value);\n    },\n    stop: function stop() {\n      if (isDone) {\n        console.warn('Calling stop has no effect as the animation has already completed');\n        return;\n      }\n      if (!isStarted) {\n        console.warn(\"Calling stop has no effect as the animation hasn't been started\");\n        return;\n      }\n      wasStopped = true;\n      evaluateOnce(set(currentState.finished, 1), currentState.finished);\n    },\n    __stopImmediately_testOnly: function __stopImmediately_testOnly(result) {\n      animation.stop();\n      isDone = result;\n      value.__detachAnimation(animation);\n    }\n  };\n  return animation;\n}\n\nexport default function backwardsCompatibleAnimWrapper(node, animationStateDefaults) {\n  return function (clock, state, config) {\n    if (config !== undefined) {\n      return node(clock, state, config);\n    }\n    return createOldAnimationObject(node, animationStateDefaults, clock, state);\n  };\n}","map":{"version":3,"sources":["backwardCompatibleAnimWrapper.js"],"names":["always","block","call","clockRunning","cond","set","startClock","stopClock","Clock","evaluateOnce","createOldAnimationObject","node","animationStateDefaults","value","config","newClock","currentState","alwaysNode","isStarted","isDone","wasStopped","animationCallback","animation","start","currentAnimationCallback","finished","console","warn","isNativelyInitialized","position","__detachAnimation","__attachAnimation","__addChild","__detach","__initialized","__removeChild","stop","__stopImmediately_testOnly","result","backwardsCompatibleAnimWrapper","clock","state","undefined"],"mappings":"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","sourcesContent":["import {\n  always,\n  block,\n  call,\n  clockRunning,\n  cond,\n  set,\n  startClock,\n  stopClock,\n} from '../base';\nimport Clock from '../core/AnimatedClock';\nimport { evaluateOnce } from '../derived/evaluateOnce';\n\nfunction createOldAnimationObject(node, animationStateDefaults, value, config) {\n  const newClock = new Clock();\n  const currentState = animationStateDefaults();\n  let alwaysNode;\n  let isStarted = false;\n  let isDone = false;\n  let wasStopped = false;\n  let animationCallback;\n  const animation = {\n    start: currentAnimationCallback => {\n      animationCallback = currentAnimationCallback;\n      if (isStarted) {\n        animationCallback && animationCallback({ finished: false });\n        return;\n      }\n      if (isDone) {\n        console.warn('Animation has been finished before');\n        // inconsistent with React Native\n        return;\n      }\n\n      if (!value.isNativelyInitialized()) {\n        return;\n      }\n\n      isStarted = true;\n      evaluateOnce(\n        set(currentState.position, value),\n        currentState.position,\n        () => {\n          alwaysNode = always(\n            set(\n              value,\n              block([\n                cond(clockRunning(newClock), 0, startClock(newClock)),\n                node(newClock, currentState, config),\n                cond(currentState.finished, [\n                  call([], () => {\n                    isStarted = false;\n                    if (!wasStopped) {\n                      isDone = true;\n                    }\n                    value.__detachAnimation(animation);\n                    isDone = true;\n                    if (!wasStopped) {\n                      wasStopped = false;\n                    }\n                  }),\n                  stopClock(newClock),\n                ]),\n                currentState.position,\n              ])\n            )\n          );\n          value.__attachAnimation(animation);\n          alwaysNode.__addChild(value);\n        }\n      );\n    },\n    __detach: () => {\n      animationCallback && animationCallback({ finished: isDone });\n      animationCallback = null;\n      value.__initialized && alwaysNode.__removeChild(value);\n    },\n    stop: () => {\n      if (isDone) {\n        console.warn(\n          'Calling stop has no effect as the animation has already completed'\n        );\n        return;\n      }\n      if (!isStarted) {\n        console.warn(\n          \"Calling stop has no effect as the animation hasn't been started\"\n        );\n        return;\n      }\n      wasStopped = true;\n      evaluateOnce(set(currentState.finished, 1), currentState.finished);\n    },\n    __stopImmediately_testOnly: result => {\n      animation.stop();\n      isDone = result;\n      value.__detachAnimation(animation);\n    },\n  };\n  return animation;\n}\n\n/**\n * Depending on the arguments list we either return animation node or return an\n * animation object that is compatible with the original Animated API\n */\nexport default function backwardsCompatibleAnimWrapper(\n  node,\n  animationStateDefaults\n) {\n  return (clock, state, config) => {\n    if (config !== undefined) {\n      return node(clock, state, config);\n    }\n    return createOldAnimationObject(node, animationStateDefaults, clock, state);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}