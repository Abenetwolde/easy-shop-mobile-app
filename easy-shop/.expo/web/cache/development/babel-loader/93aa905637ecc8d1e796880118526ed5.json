{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n  var _super = _createSuper(AnimatedSet);\n  function AnimatedSet(what, value) {\n    var _this;\n    _classCallCheck(this, AnimatedSet);\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.set first argument should be of type AnimatedNode but got \".concat(what));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'set',\n      what: what,\n      value: value\n    }, [value]);\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_value\", void 0);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n  _createClass(AnimatedSet, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedSet, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n      this._what.setValue(newValue);\n      return newValue;\n    }\n  }]);\n  return AnimatedSet;\n}(AnimatedNode);\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"sources":["AnimatedSet.js"],"names":["AnimatedNode","invariant","val","adapt","AnimatedSet","constructor","what","value","type","_constant","_what","_value","toString","__nodeID","__onEvaluate","newValue","setValue","createAnimatedSet"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AACA,SAASC,KAAT;AAAA,IAEMC,WAAN;EAAA;EAAA;EAIEC,qBAAYC,IAAD,EAAOC,KAAP,EAAc;IAAA;IAAA;IACvBN,SAAS,CACPK,IAAI,YAAYN,YADT,EAAA,iFAAA,CAAA,MAAA,CAE2EM,IAF3E,CAAA,CAATL;IAIAA,SAAS,CACPM,KAAK,YAAYP,YADV,EAAA,oGAAA,CAAA,MAAA,CAE8FO,KAF9F,CAAA,CAATN;IAIA,0BAAM;MAAEO,IAAI,EAAE,KAAR;MAAeF,IAAf,EAAeA,IAAf;MAAqBC,KAAAA,EAAAA;IAArB,CAAN,EAAoC,CAACA,KAAD,CAApC;IATuB,eAAA,gCAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,gCAAA,QAAA,EAAA,KAAA,CAAA,CAAA;IAUvBN,SAAS,CAAC,CAACK,IAAI,CAACG,SAAP,EAAkB,oCAAlB,CAATR;IACA,MAAKS,KAAL,GAAaJ,IAAb;IACA,MAAKK,MAAL,GAAcJ,KAAd;IAAA;EACD;EAAA;IAAA;IAAA,OAEDK,oBAAW;MACT,OAAA,mBAAA,CAAA,MAAA,CAA2B,IAAA,CAAKC,QAAhC,CAAA;IACD;EAAA;IAAA;IAAA,OAEDC,wBAAe;MACb,IAAMC,QAAQ,GAAGb,GAAG,CAAC,IAAA,CAAKS,MAAN,CAApB;MACA,IAAA,CAAKD,KAAL,CAAWM,QAAX,CAAoBD,QAApB,CAAA;MACA,OAAOA,QAAP;IACD;EAAA;EAAA;AAAA,EA3BuBf,YAA1B;AA8BA,OAAO,SAASiB,iBAAT,CAA2BX,IAA3B,EAAiCC,KAAjC,EAAwC;EAC7C,OAAO,IAAIH,WAAJ,CAAgBE,IAAhB,EAAsBH,KAAK,CAACI,KAAD,CAA3B,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}