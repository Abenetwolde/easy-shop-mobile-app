{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport useOptionsGetters from \"./useOptionsGetters\";\n\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    routeState = _ref.routeState,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    options = _ref.options;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var _useOptionsGetters = useOptionsGetters({\n      key: route.key,\n      options: options,\n      navigation: navigation\n    }),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter;\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var isInitialRef = React.useRef(true);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n  });\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["React","NavigationStateContext","StaticContainer","EnsureSingleNavigator","useOptionsGetters","SceneView","screen","route","navigation","routeState","getState","setState","options","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","name","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}