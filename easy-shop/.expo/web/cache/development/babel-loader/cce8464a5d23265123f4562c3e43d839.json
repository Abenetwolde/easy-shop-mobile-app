{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { SingleNavigatorContext } from \"./EnsureSingleNavigator\";\n\nexport default function useRegisterNavigator() {\n  var _React$useState = React.useState(function () {\n      return nanoid();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    key = _React$useState2[0];\n  var container = React.useContext(SingleNavigatorContext);\n  if (container === undefined) {\n    throw new Error(\"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\");\n  }\n  React.useEffect(function () {\n    var register = container.register,\n      unregister = container.unregister;\n    register(key);\n    return function () {\n      return unregister(key);\n    };\n  }, [container, key]);\n  return key;\n}","map":{"version":3,"sources":["useRegisterNavigator.tsx"],"names":["React","nanoid","SingleNavigatorContext","useRegisterNavigator","key","useState","container","useContext","undefined","Error","useEffect","register","unregister"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,sBAAT;;AAMA,eAAe,SAASC,oBAAT,GAAgC;EAC7C,sBAAcH,KAAK,CAACK,QAANL,CAAe;MAAA,OAAMC,MAAM,EAA3BD;IAAAA,EAAd;IAAA;IAAOI,GAAD;EACN,IAAME,SAAS,GAAGN,KAAK,CAACO,UAANP,CAAiBE,sBAAjBF,CAAlB;EAEA,IAAIM,SAAS,KAAKE,SAAlB,EAA6B;IAC3B,MAAM,IAAIC,KAAJ,CACJ,wFADI,CAAN;EAGD;EAEDT,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpB,IAAQW,QAAF,GAA2BL,SAAjC,CAAQK,QAAF;MAAYC,UAAAA,GAAeN,SAAjC,CAAkBM,UAAAA;IAElBD,QAAQ,CAACP,GAAD,CAARO;IAEA,OAAO;MAAA,OAAMC,UAAU,CAACR,GAAD,CAAvB;IAAA;EACD,CANDJ,EAMG,CAACM,SAAD,EAAYF,GAAZ,CANHJ,CAAAA;EAQA,OAAOI,GAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\n\n/**\n * Register a navigator in the parent context (either a navigation container or a screen).\n * This is used to prevent multiple navigators under a single container or screen.\n */\nexport default function useRegisterNavigator() {\n  const [key] = React.useState(() => nanoid());\n  const container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\"\n    );\n  }\n\n  React.useEffect(() => {\n    const { register, unregister } = container;\n\n    register(key);\n\n    return () => unregister(key);\n  }, [container, key]);\n\n  return key;\n}\n"]},"metadata":{},"sourceType":"module"}