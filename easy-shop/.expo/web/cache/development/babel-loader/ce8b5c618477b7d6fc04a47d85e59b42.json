{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"active\", \"style\"],\n  _excluded2 = [\"enabled\"],\n  _excluded3 = [\"enabled\", \"active\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar _Screens;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n}\nvar WebScreen = function (_React$Component) {\n  _inherits(WebScreen, _React$Component);\n  var _super = _createSuper(WebScreen);\n  function WebScreen() {\n    _classCallCheck(this, WebScreen);\n    return _super.apply(this, arguments);\n  }\n  _createClass(WebScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        active = _this$props.active,\n        style = _this$props.style,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      return React.createElement(View, _extends({\n        hidden: !active,\n        style: [style, {\n          display: active ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n  }]);\n  return WebScreen;\n}(React.Component);\nvar AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\nexport var shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var enabled = _ref.enabled,\n    rest = _objectWithoutProperties(_ref, _excluded2);\n  var _Screens2;\n  if (enabled && Platform.OS !== 'web' && ((_Screens2 = Screens) === null || _Screens2 === void 0 ? void 0 : _Screens2.screensEnabled())) {\n    return (\n      React.createElement(Screens.ScreenContainer, _extends({\n        enabled: enabled\n      }, rest))\n    );\n  }\n  return React.createElement(View, rest);\n};\nexport var MaybeScreen = function MaybeScreen(_ref2) {\n  var enabled = _ref2.enabled,\n    active = _ref2.active,\n    rest = _objectWithoutProperties(_ref2, _excluded3);\n  var _Screens3;\n  if (enabled && Platform.OS === 'web') {\n    return React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n  if (enabled && ((_Screens3 = Screens) === null || _Screens3 === void 0 ? void 0 : _Screens3.screensEnabled())) {\n    if (shouldUseActivityState) {\n      return (\n        React.createElement(Screens.Screen, _extends({\n          enabled: enabled,\n          activityState: active\n        }, rest))\n      );\n    } else {\n      return (\n        React.createElement(Screens.Screen, _extends({\n          enabled: enabled,\n          active: active\n        }, rest))\n      );\n    }\n  }\n  return React.createElement(View, rest);\n};","map":{"version":3,"sources":["Screens.tsx"],"names":["React","Screens","require","e","WebScreen","Component","render","active","style","rest","props","display","AnimatedWebScreen","Animated","createAnimatedComponent","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","OS","screensEnabled","MaybeScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}