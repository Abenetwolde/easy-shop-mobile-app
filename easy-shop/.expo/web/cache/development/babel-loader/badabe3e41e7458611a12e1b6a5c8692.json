{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nvar KeyboardManager = function (_React$Component) {\n  _inherits(KeyboardManager, _React$Component);\n  var _super = _createSuper(KeyboardManager);\n  function KeyboardManager() {\n    var _this;\n    _classCallCheck(this, KeyboardManager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"previouslyFocusedTextInput\", undefined);\n    _defineProperty(_assertThisInitialized(_this), \"startTimestamp\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"keyboardTimeout\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"clearKeyboardTimeout\", function () {\n      if (_this.keyboardTimeout !== undefined) {\n        clearTimeout(_this.keyboardTimeout);\n        _this.keyboardTimeout = undefined;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handlePageChangeStart\", function () {\n      if (!_this.props.enabled) {\n        return;\n      }\n      _this.clearKeyboardTimeout();\n\n      var input = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n      TextInput.State.blurTextInput(input);\n\n      _this.previouslyFocusedTextInput = input;\n\n      _this.startTimestamp = Date.now();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handlePageChangeConfirm\", function (force) {\n      if (!_this.props.enabled) {\n        return;\n      }\n      _this.clearKeyboardTimeout();\n      if (force) {\n        Keyboard.dismiss();\n      } else {\n        var input = _this.previouslyFocusedTextInput;\n        if (input) {\n          TextInput.State.blurTextInput(input);\n        }\n      }\n\n      _this.previouslyFocusedTextInput = undefined;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handlePageChangeCancel\", function () {\n      if (!_this.props.enabled) {\n        return;\n      }\n      _this.clearKeyboardTimeout();\n\n      var input = _this.previouslyFocusedTextInput;\n      if (input) {\n        if (Date.now() - _this.startTimestamp < 100) {\n          _this.keyboardTimeout = setTimeout(function () {\n            TextInput.State.focusTextInput(input);\n            _this.previouslyFocusedTextInput = undefined;\n          }, 100);\n        } else {\n          TextInput.State.focusTextInput(input);\n          _this.previouslyFocusedTextInput = undefined;\n        }\n      }\n    });\n    return _this;\n  }\n  _createClass(KeyboardManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearKeyboardTimeout();\n    }\n  }, {\n    key: \"render\",\n    value:\n\n    function render() {\n      return this.props.children({\n        onPageChangeStart: this.handlePageChangeStart,\n        onPageChangeConfirm: this.handlePageChangeConfirm,\n        onPageChangeCancel: this.handlePageChangeCancel\n      });\n    }\n  }]);\n  return KeyboardManager;\n}(React.Component);\nexport { KeyboardManager as default };","map":{"version":3,"sources":["KeyboardManager.tsx"],"names":["React","KeyboardManager","Component","componentWillUnmount","clearKeyboardTimeout","undefined","keyboardTimeout","clearTimeout","props","enabled","input","TextInput","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","startTimestamp","Date","now","force","Keyboard","dismiss","setTimeout","focusTextInput","render","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard, HostComponent } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: (force: boolean) => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: InputRef = undefined;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // @ts-expect-error: blurTextInput accepts both number and ref, but types say only ref\n    const input: InputRef = TextInput.State.currentlyFocusedInput\n      ? TextInput.State.currentlyFocusedInput()\n      : TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = (force: boolean) => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    if (force) {\n      // Always dismiss input, even if we don't have a ref to it\n      // We might not have the ref if onPageChangeStart was never called\n      // This can happen if page change was not from a gesture\n      Keyboard.dismiss();\n    } else {\n      const input = this.previouslyFocusedTextInput;\n\n      if (input) {\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        TextInput.State.blurTextInput(input);\n      }\n    }\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = undefined;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = undefined;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = undefined;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}