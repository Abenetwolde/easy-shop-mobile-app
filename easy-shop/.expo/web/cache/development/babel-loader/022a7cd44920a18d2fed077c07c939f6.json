{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"state\", \"navigation\", \"descriptors\", \"activeTintColor\", \"inactiveTintColor\", \"allowFontScaling\", \"showIcon\", \"showLabel\", \"pressColor\", \"iconStyle\", \"labelStyle\", \"indicatorStyle\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nexport default function TabBarTop(props) {\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var state = props.state,\n    navigation = props.navigation,\n    descriptors = props.descriptors,\n    _props$activeTintColo = props.activeTintColor,\n    activeTintColor = _props$activeTintColo === void 0 ? colors.text : _props$activeTintColo,\n    _props$inactiveTintCo = props.inactiveTintColor,\n    inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(activeTintColor).alpha(0.5).rgb().string() : _props$inactiveTintCo,\n    _props$allowFontScali = props.allowFontScaling,\n    allowFontScaling = _props$allowFontScali === void 0 ? true : _props$allowFontScali,\n    _props$showIcon = props.showIcon,\n    showIcon = _props$showIcon === void 0 ? false : _props$showIcon,\n    _props$showLabel = props.showLabel,\n    showLabel = _props$showLabel === void 0 ? true : _props$showLabel,\n    _props$pressColor = props.pressColor,\n    pressColor = _props$pressColor === void 0 ? Color(activeTintColor).alpha(0.08).rgb().string() : _props$pressColor,\n    iconStyle = props.iconStyle,\n    labelStyle = props.labelStyle,\n    indicatorStyle = props.indicatorStyle,\n    style = props.style,\n    rest = _objectWithoutProperties(props, _excluded);\n  return React.createElement(TabBar, _extends({}, rest, {\n    navigationState: state,\n    activeColor: activeTintColor,\n    inactiveColor: inactiveTintColor,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, indicatorStyle],\n    style: [{\n      backgroundColor: colors.card\n    }, style],\n    pressColor: pressColor,\n    getAccessibilityLabel: function getAccessibilityLabel(_ref) {\n      var route = _ref.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref3) {\n      var route = _ref3.route,\n        preventDefault = _ref3.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: function onTabLongPress(_ref4) {\n      var route = _ref4.route;\n      return navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    },\n    renderIcon: function renderIcon(_ref5) {\n      var route = _ref5.route,\n        focused = _ref5.focused,\n        color = _ref5.color;\n      if (showIcon === false) {\n        return null;\n      }\n      var options = descriptors[route.key].options;\n      if (options.tabBarIcon !== undefined) {\n        var icon = options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n        return React.createElement(View, {\n          style: [styles.icon, iconStyle]\n        }, icon);\n      }\n      return null;\n    },\n    renderLabel: function renderLabel(_ref6) {\n      var route = _ref6.route,\n        focused = _ref6.focused,\n        color = _ref6.color;\n      if (showLabel === false) {\n        return null;\n      }\n      var options = descriptors[route.key].options;\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n      if (typeof label === 'string') {\n        return React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, label);\n      }\n      return label({\n        focused: focused,\n        color: color\n      });\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["React","TabBar","useTheme","Color","TabBarTop","props","colors","state","navigation","descriptors","activeTintColor","text","inactiveTintColor","alpha","rgb","string","allowFontScaling","showIcon","showLabel","pressColor","iconStyle","labelStyle","indicatorStyle","style","rest","backgroundColor","primary","card","route","key","options","tabBarAccessibilityLabel","tabBarTestID","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","focused","color","tabBarIcon","undefined","icon","styles","label","tabBarLabel","title","name","create","height","width","textAlign","textTransform","fontSize","margin"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAAgBC,QAAhB,QAAgC,0BAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAAkD;EAC/D,gBAAmBH,QAAQ,EAA3B;IAAQI,MAAAA,aAAAA,MAAAA;EAER,IACEC,KADI,GAeFF,KAfJ,CACEE,KADI;IAEJC,UAFI,GAeFH,KAfJ,CAEEG,UAFI;IAGJC,WAHI,GAeFJ,KAfJ,CAGEI,WAHI;IAAA,wBAeFJ,KAfJ,CAIEK,eAAe;IAAfA,eAAe,sCAAGJ,MAAM,CAACK,IAJrB;IAAA,wBAeFN,KAfJ,CAKEO,iBAAiB;IAAjBA,iBAAiB,sCAAGT,KAAK,CAACO,eAAD,CAALP,CAAuBU,KAAvBV,CAA6B,GAA7BA,CAAAA,CAAkCW,GAAlCX,EAAAA,CAAwCY,MAAxCZ,EALhB;IAAA,wBAeFE,KAfJ,CAMEW,gBAAgB;IAAhBA,gBAAgB,sCAAG,IANf;IAAA,kBAeFX,KAfJ,CAOEY,QAAQ;IAARA,QAAQ,gCAAG,KAPP;IAAA,mBAeFZ,KAfJ,CAQEa,SAAS;IAATA,SAAS,iCAAG,IARR;IAAA,oBAeFb,KAfJ,CASEc,UAAU;IAAVA,UAAU,kCAAGhB,KAAK,CAACO,eAAD,CAALP,CAAuBU,KAAvBV,CAA6B,IAA7BA,CAAAA,CAAmCW,GAAnCX,EAAAA,CAAyCY,MAAzCZ,EATT;IAUJiB,SAVI,GAeFf,KAfJ,CAUEe,SAVI;IAWJC,UAXI,GAeFhB,KAfJ,CAWEgB,UAXI;IAYJC,cAZI,GAeFjB,KAfJ,CAYEiB,cAZI;IAaJC,KAbI,GAeFlB,KAfJ,CAaEkB,KAbI;IAcDC,IAAAA,4BACDnB,KAfJ;EAiBA,OACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMmB,IADN,EAAA;IAEE,eAAe,EAAEjB,KAFnB;IAGE,WAAW,EAAEG,eAHf;IAIE,aAAa,EAAEE,iBAJjB;IAKE,cAAc,EAAE,CAAC;MAAEa,eAAe,EAAEnB,MAAM,CAACoB;IAA1B,CAAD,EAAsCJ,cAAtC,CALlB;IAME,KAAK,EAAE,CAAC;MAAEG,eAAe,EAAEnB,MAAM,CAACqB;IAA1B,CAAD,EAAmCJ,KAAnC,CANT;IAOE,UAAU,EAAEJ,UAPd;IAQE,qBAAqB,EAAE;MAAA,IAAGS,KAAAA,QAAAA,KAAAA;MAAAA,OACxBnB,WAAW,CAACmB,KAAK,CAACC,GAAP,CAAXpB,CAAuBqB,OAAvBrB,CAA+BsB,wBATnC;IAAA;IAWE,SAAS,EAAE;MAAA,IAAGH,KAAAA,SAAAA,KAAAA;MAAAA,OAAYnB,WAAW,CAACmB,KAAK,CAACC,GAAP,CAAXpB,CAAuBqB,OAAvBrB,CAA+BuB,YAX3D;IAAA;IAYE,UAAU,EAAE,2BAA+B;MAAA,IAA5BJ,KAAF,SAAEA,KAAF;QAASK,cAAAA,SAAAA,cAAAA;MACpB,IAAMC,KAAK,GAAG,UAAU,CAACC,IAAX,CAAgB;QAC5BC,IAAI,EAAE,UADsB;QAE5BC,MAAM,EAAET,KAAK,CAACC,GAFc;QAG5BS,iBAAiB,EAAE;MAHS,CAAhB,CAAd;MAMA,IAAIJ,KAAK,CAACK,gBAAV,EAA4B;QAC1BN,cAAc,EAAA;MACf;IACF,CAtBH;IAuBE,cAAc,EAAE;MAAA,IAAGL,KAAAA,SAAAA,KAAAA;MAAAA,OACjB,UAAU,CAACO,IAAX,CAAgB;QACdC,IAAI,EAAE,cADQ;QAEdC,MAAM,EAAET,KAAK,CAACC;MAFA,CAAhB,CAxBJ;IAAA;IA6BE,UAAU,EAAE,2BAA+B;MAAA,IAA5BD,KAAF,SAAEA,KAAF;QAASY,OAAT,SAASA,OAAT;QAAkBC,KAAAA,SAAAA,KAAAA;MAC7B,IAAIxB,QAAQ,KAAK,KAAjB,EAAwB;QACtB,OAAO,IAAP;MACD;MAED,IAAQa,OAAAA,GAAYrB,WAAW,CAACmB,KAAK,CAACC,GAAP,CAA/B,CAAQC,OAAAA;MAER,IAAIA,OAAO,CAACY,UAARZ,KAAuBa,SAA3B,EAAsC;QACpC,IAAMC,IAAI,GAAG,OAAO,CAACF,UAAR,CAAmB;UAAEF,OAAF,EAAEA,OAAF;UAAWC,KAAAA,EAAAA;QAAX,CAAnB,CAAb;QAEA,OAAO,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;UAAM,KAAK,EAAE,CAACI,MAAM,CAACD,IAAR,EAAcxB,SAAd;QAAb,CAAA,EAAwCwB,IAAxC,CAAP;MACD;MAED,OAAO,IAAP;IACD,CA3CH;IA4CE,WAAW,EAAE,4BAA+B;MAAA,IAA5BhB,KAAF,SAAEA,KAAF;QAASY,OAAT,SAASA,OAAT;QAAkBC,KAAAA,SAAAA,KAAAA;MAC9B,IAAIvB,SAAS,KAAK,KAAlB,EAAyB;QACvB,OAAO,IAAP;MACD;MAED,IAAQY,OAAAA,GAAYrB,WAAW,CAACmB,KAAK,CAACC,GAAP,CAA/B,CAAQC,OAAAA;MACR,IAAMgB,KAAK,GACThB,OAAO,CAACiB,WAARjB,KAAwBa,SAAxBb,GACIA,OAAO,CAACiB,WADZjB,GAEIA,OAAO,CAACkB,KAARlB,KAAkBa,SAAlBb,GACAA,OAAO,CAACkB,KADRlB,GAECF,KAAD,CAAyBqB,IAL/B;MAOA,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;QAC7B,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;UACE,KAAK,EAAE,CAACD,MAAM,CAACC,KAAR,EAAe;YAAEL,KAAAA,EAAAA;UAAF,CAAf,EAA0BpB,UAA1B,CADT;UAEE,gBAAgB,EAAEL;QAFpB,CAAA,EAIG8B,KAJH,CADF;MAQD;MAED,OAAOA,KAAK,CAAC;QAAEN,OAAF,EAAEA,OAAF;QAAWC,KAAAA,EAAAA;MAAX,CAAD,CAAZ;IACD;EArEH,CAAA,CAAA,CADF;AAyED;AAED,IAAMI,MAAM,GAAG,UAAU,CAACK,MAAX,CAAkB;EAC/BN,IAAI,EAAE;IACJO,MAAM,EAAE,EADJ;IAEJC,KAAK,EAAE;EAFH,CADyB;EAK/BN,KAAK,EAAE;IACLO,SAAS,EAAE,QADN;IAELC,aAAa,EAAE,WAFV;IAGLC,QAAQ,EAAE,EAHL;IAILC,MAAM,EAAE,CAJH;IAKL/B,eAAe,EAAE;EALZ;AALwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop(props: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const {\n    state,\n    navigation,\n    descriptors,\n    activeTintColor = colors.text,\n    inactiveTintColor = Color(activeTintColor).alpha(0.5).rgb().string(),\n    allowFontScaling = true,\n    showIcon = false,\n    showLabel = true,\n    pressColor = Color(activeTintColor).alpha(0.08).rgb().string(),\n    iconStyle,\n    labelStyle,\n    indicatorStyle,\n    style,\n    ...rest\n  } = props;\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      activeColor={activeTintColor}\n      inactiveColor={inactiveTintColor}\n      indicatorStyle={[{ backgroundColor: colors.primary }, indicatorStyle]}\n      style={[{ backgroundColor: colors.card }, style]}\n      pressColor={pressColor}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        if (showIcon === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return <View style={[styles.icon, iconStyle]}>{icon}</View>;\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        if (showLabel === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, labelStyle]}\n              allowFontScaling={allowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}