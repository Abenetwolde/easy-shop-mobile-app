{"ast":null,"code":"import processColor from \"react-native-web/dist/exports/processColor\";\nimport { round } from \"../base\";\nimport color from \"./color\";\nimport interpolate, { Extrapolate } from \"./interpolate\";\nfunction red(c) {\n  return c >> 16 & 255;\n}\nfunction green(c) {\n  return c >> 8 & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return (c >> 24 & 255) / 255;\n}\n\nexport default function interpolateColors(animationValue, options) {\n  var inputRange = options.inputRange,\n    outputColorRange = options.outputColorRange;\n  var colors = outputColorRange.map(processColor);\n  var r = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(red),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var g = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(green),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var b = round(interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(blue),\n    extrapolate: Extrapolate.CLAMP\n  }));\n  var a = interpolate(animationValue, {\n    inputRange: inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return color(r, g, b, a);\n}","map":{"version":3,"sources":["interpolateColors.js"],"names":["round","color","interpolate","Extrapolate","red","c","green","blue","opacity","interpolateColors","animationValue","options","inputRange","outputColorRange","colors","map","processColor","r","outputRange","extrapolate","CLAMP","g","b","a"],"mappings":";AACA,SAASA,KAAT;AACA,OAAOC,KAAP;AACA,OAAOC,WAAP,IAAsBC,WAAtB;AAEA,SAASC,GAAT,CAAaC,CAAb,EAAgB;EACd,OAAQA,CAAC,IAAI,EAAN,GAAY,GAAnB;AACD;AACD,SAASC,KAAT,CAAeD,CAAf,EAAkB;EAChB,OAAQA,CAAC,IAAI,CAAN,GAAW,GAAlB;AACD;AACD,SAASE,IAAT,CAAcF,CAAd,EAAiB;EACf,OAAOA,CAAC,GAAG,GAAX;AACD;AACD,SAASG,OAAT,CAAiBH,CAAjB,EAAoB;EAClB,OAAO,CAAEA,CAAC,IAAI,EAAN,GAAY,GAAb,IAAoB,GAA3B;AACD;;AAaD,eAAe,SAASI,iBAAT,CAA2BC,cAA3B,EAA2CC,OAA3C,EAAoD;EACjE,IAAQC,UAAF,GAAmCD,OAAzC,CAAQC,UAAF;IAAcC,gBAAAA,GAAqBF,OAAzC,CAAoBE,gBAAAA;EACpB,IAAMC,MAAM,GAAGD,gBAAgB,CAACE,GAAjBF,CAAqBG,YAArBH,CAAf;EAEA,IAAMI,CAAC,GAAGjB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;IAC1BE,UAD0B,EAC1BA,UAD0B;IAE1BM,WAAW,EAAEJ,MAAM,CAACC,GAAPD,CAAWV,GAAXU,CAFa;IAG1BK,WAAW,EAAEhB,WAAW,CAACiB;EAHC,CAAjB,CADE,CAAf;EAOA,IAAMC,CAAC,GAAGrB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;IAC1BE,UAD0B,EAC1BA,UAD0B;IAE1BM,WAAW,EAAEJ,MAAM,CAACC,GAAPD,CAAWR,KAAXQ,CAFa;IAG1BK,WAAW,EAAEhB,WAAW,CAACiB;EAHC,CAAjB,CADE,CAAf;EAOA,IAAME,CAAC,GAAGtB,KAAK,CACbE,WAAW,CAACQ,cAAD,EAAiB;IAC1BE,UAD0B,EAC1BA,UAD0B;IAE1BM,WAAW,EAAEJ,MAAM,CAACC,GAAPD,CAAWP,IAAXO,CAFa;IAG1BK,WAAW,EAAEhB,WAAW,CAACiB;EAHC,CAAjB,CADE,CAAf;EAOA,IAAMG,CAAC,GAAGrB,WAAW,CAACQ,cAAD,EAAiB;IACpCE,UADoC,EACpCA,UADoC;IAEpCM,WAAW,EAAEJ,MAAM,CAACC,GAAPD,CAAWN,OAAXM,CAFuB;IAGpCK,WAAW,EAAEhB,WAAW,CAACiB;EAHW,CAAjB,CAArB;EAMA,OAAOnB,KAAK,CAACgB,CAAD,EAAII,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAZ;AACD","sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"]},"metadata":{},"sourceType":"module"}